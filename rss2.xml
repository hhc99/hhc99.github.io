<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Dreamside Maroon</title>
    <link>http://hhc99.github.io/</link>
    
    <atom:link href="http://hhc99.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Stay hungry, stay foolish</description>
    <pubDate>Sat, 03 Dec 2022 05:27:26 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Hololens2和Unity无线远程部署</title>
      <link>http://hhc99.github.io/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/</link>
      <guid>http://hhc99.github.io/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/</guid>
      <pubDate>Sat, 03 Dec 2022 05:03:23 GMT</pubDate>
      
      <description>&lt;p&gt;陆陆续续摸索了好多天，一直游走与CSDN和Github之间查找解决方案，主要参考的是微软官方的解决文档和开源项目，接下来主要就是记录一些在过程中随机遇到的问题和最终采取的解决方法的一些流水帐，也是方便日后自己做一些回顾和提前的整理。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>陆陆续续摸索了好多天，一直游走与CSDN和Github之间查找解决方案，主要参考的是微软官方的解决文档和开源项目，接下来主要就是记录一些在过程中随机遇到的问题和最终采取的解决方法的一些流水帐，也是方便日后自己做一些回顾和提前的整理。</p> <span id="more"></span><h1 id="第一站"><a href="#第一站" class="headerlink" title="第一站"></a>第一站</h1><p>我这边的配置是：</p><ul><li>Unity2021.3.13f1c1版本</li><li>Window11</li><li>Hololens2</li><li>VisualStudio2019</li></ul><p>微软官方使用的是Unity2020版本，主要是涉及到了一个Unity版本兼容性的问题。</p><p>首先，从微软官方下载此项目，可以去参考文档1里的github进行下载，这里也放一个百度网盘的下载链接：<a href="2222">2222</a><br>解压里面的MixedReality-QRCode-Sample，简单介绍一下文件的主要组成：</p><table><thead><tr><th>文件&#x2F;文件夹</th><th>描述</th></tr></thead><tbody><tr><td>Samples&#x2F;Assets</td><td>主要包含的Unity的资产、场景、预制件和脚本</td></tr><tr><td>Samples&#x2F;Packages</td><td>项目清单和一些资源包</td></tr><tr><td>Samples&#x2F;ProjectSettings</td><td>Unity资源的设置文件</td></tr><tr><td>Samples&#x2F;UserSettings</td><td>从Unity生成的用户设置</td></tr><tr><td>.gitignore</td><td>定义提交时要忽略的内容</td></tr><tr><td>README.md</td><td><strong>必读文件</strong></td></tr><tr><td>LICENSE</td><td><strong>不要侵犯别人的版权,虽然但是一般我不咋看</strong></td></tr></tbody></table><p>切入正题，直接点击<strong>Sample-&gt;Assets-&gt;QRCodesSample.unity</strong>，这就是一般的打开Unity场景的方法,这里我是用Unity Hub来管理Unity的，我觉得比较方便，但是上文已经说到，这个项目其实是导入的Unity2020版本的生成文档，因此必然会和我的有冲突，接下来，用图来辅助描述：</p><p><img data-src="https://imgse.com/i/zDilDg" alt="图1"><br><img data-src="D:\Blog\source_posts\Hololens2系列\图1.png" alt="图1"></p><p><img data-src="/_posts%5CHololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2%5C%E5%9B%BE1.png" alt="图1"></p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE1.png" class title="这是一张图片"><p>如图所示，就出现已保存的项目（2020.3.38f1）的版本与当前运行的编辑器（2021.3.13f1c1）不符的问题，我们选择继续。</p><p><img data-src="https://imgse.com/i/zDFry8" alt="图2"></p><p>我们选择Enter Safe Mode。</p><p><img data-src="https://imgse.com/i/zDk9mD" alt="图3"></p><p>结果显示出现了bug,我们仔细看看，其实是关于一些命名空间的问题，我查来查去，发现是构想项目的过程中缺少包的问题，这里我们还是用VS2019打开查看一下。</p><p><img data-src="https://imgse.com/i/zDkYcV" alt="图4"></p><p>最后其实我的解决方案是安装了最新的.Nupkg包，当时我第一次接触到这个类型的包，也不知道是啥，也是搜了一段时间，我的理解就是一种特殊的压缩包，有专门的管理包库NuGet，其实这种包有一种很简单查看内容的方法，就是把后缀名改成.rar文件，然后对整个文件进行解压缩，就可以对这个文件中的内容进行查看。这里我们仔细看一下上图中的Microsoft.MixedReality.QR的版本是0.5.3019，但我觉得就是这里出了问题，因此去NuGet库中下载了最新的包，下载地址为<a href="https://www.nuget.org/packages/Microsoft.MixedReality.QR#readme-body-tab">https://www.nuget.org/packages/Microsoft.MixedReality.QR#readme-body-tab</a></p><p><img data-src="https://imgse.com/i/zDVy3n" alt="图5"></p><p>我们下载文件到项目所在的路径，在Unity中导入资源包。（如果你的Unity中配置了NuGet管理的话，我们可以采取方法二，可以直接在Unity中点击NuGet-&gt;Management NuGet Package-&gt;online search Microsoft.MixedReality.QR进行搜索，点击安装即可）如图，我们安装了0.5.3037的包，这个时候我们再看一下Unity界面。发现已经不报错误了，而且Assets-&gt;Packages中也多了Microsoft.MixedReality.QR.0.5.3037，说明我们已经成功地解决了bug。(注意：这里特别注意，因为每个人的Unity在安装的时候选择的组件都不一样，所以建议大家仔细看看安装时的一些选项，针对Unity,其Unity Hub我觉得挺好用的，相当于是一个很好的前端交互界面，可以比较好地管理版本和创建项目，但是不要乱安装一些版本，因为其实Unity的每一个版本都挺大的，慎重，所以我当时在刚遇到这种错误的时候也尝试了安装与项目的构建时相同版本2020.3.38f1，但是当时这个版本下载不成功，可能也是就现在而言2020.3.38f1版本不稳定了，因此也就直接用目前的2021版本来进行项目构建)</p><p><img data-src="https://imgse.com/i/zDV2uV" alt="图6"><br><img data-src="https://imgse.com/i/zDVRBT" alt="图7"></p><p>打开这个场景，Play一下，不知道在干啥？？？因此,先写到这里吧。</p><h1 id="第二站"><a href="#第二站" class="headerlink" title="第二站"></a>第二站</h1><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>1、微软官方的QR码追踪项目<a href="https://github.com/microsoft/MixedReality-QRCode-Sample">https://github.com/microsoft/MixedReality-QRCode-Sample</a></p>]]></content:encoded>
      
      
      
      <category domain="http://hhc99.github.io/tags/Hololens/">Hololens</category>
      
      
      <comments>http://hhc99.github.io/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hololens2系列</title>
      <link>http://hhc99.github.io/Hololens2%E7%B3%BB%E5%88%97/</link>
      <guid>http://hhc99.github.io/Hololens2%E7%B3%BB%E5%88%97/</guid>
      <pubDate>Fri, 02 Dec 2022 08:34:15 GMT</pubDate>
      
      <description>&lt;p&gt;陆陆续续摸索了好多天，一直游走与CSDN和Github之间查找解决方案，主要参考的是微软官方的解决文档和开源项目，接下来主要就是记录一些在过程中随机遇到的问题和最终采取的解决方法的一些流水帐，也是方便日后自己做一些回顾和提前的整理。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>陆陆续续摸索了好多天，一直游走与CSDN和Github之间查找解决方案，主要参考的是微软官方的解决文档和开源项目，接下来主要就是记录一些在过程中随机遇到的问题和最终采取的解决方法的一些流水帐，也是方便日后自己做一些回顾和提前的整理。</p> <span id="more"></span><h1 id="第一站"><a href="#第一站" class="headerlink" title="第一站"></a>第一站</h1><p>我这边的配置是：</p><ul><li>Unity2021.3.13f1c1版本</li><li>Window11</li><li>Hololens2</li><li>VisualStudio2019</li></ul><p>微软官方使用的是Unity2020版本，主要是涉及到了一个Unity版本兼容性的问题。</p><p>首先，从微软官方下载此项目，可以去参考文档1里的github进行下载，这里也放一个百度网盘的下载链接：<a href="2222">2222</a><br>解压里面的MixedReality-QRCode-Sample，简单介绍一下文件的主要组成：</p><table><thead><tr><th>文件&#x2F;文件夹</th><th>描述</th></tr></thead><tbody><tr><td>Samples&#x2F;Assets</td><td>主要包含的Unity的资产、场景、预制件和脚本</td></tr><tr><td>Samples&#x2F;Packages</td><td>项目清单和一些资源包</td></tr><tr><td>Samples&#x2F;ProjectSettings</td><td>Unity资源的设置文件</td></tr><tr><td>Samples&#x2F;UserSettings</td><td>从Unity生成的用户设置</td></tr><tr><td>.gitignore</td><td>定义提交时要忽略的内容</td></tr><tr><td>README.md</td><td><strong>必读文件</strong></td></tr><tr><td>LICENSE</td><td><strong>不要侵犯别人的版权,虽然但是一般我不咋看</strong></td></tr></tbody></table><p>切入正题，直接点击<strong>Sample-&gt;Assets-&gt;QRCodesSample.unity</strong>，这就是一般的打开Unity场景的方法,这里我是用Unity Hub来管理Unity的，我觉得比较方便，但是上文已经说到，这个项目其实是导入的Unity2020版本的生成文档，因此必然会和我的有冲突，接下来，用图来辅助描述：</p><p><img data-src="https://imgse.com/i/zDilDg" alt="图1"><br><img data-src="D:\Blog\source_posts\Hololens2系列\图1.png" alt="图1"><br><img data-src="/Hololens2%E7%B3%BB%E5%88%97/%E5%9B%BE1.png" alt="图1"></p><p>如图所示，就出现已保存的项目（2020.3.38f1）的版本与当前运行的编辑器（2021.3.13f1c1）不符的问题，我们选择继续。</p><p><img data-src="https://imgse.com/i/zDFry8" alt="图2"></p><p>我们选择Enter Safe Mode。</p><p><img data-src="https://imgse.com/i/zDk9mD" alt="图3"></p><p>结果显示出现了bug,我们仔细看看，其实是关于一些命名空间的问题，我查来查去，发现是构想项目的过程中缺少包的问题，这里我们还是用VS2019打开查看一下。</p><p><img data-src="https://imgse.com/i/zDkYcV" alt="图4"></p><p>最后其实我的解决方案是安装了最新的.Nupkg包，当时我第一次接触到这个类型的包，也不知道是啥，也是搜了一段时间，我的理解就是一种特殊的压缩包，有专门的管理包库NuGet，其实这种包有一种很简单查看内容的方法，就是把后缀名改成.rar文件，然后对整个文件进行解压缩，就可以对这个文件中的内容进行查看。这里我们仔细看一下上图中的Microsoft.MixedReality.QR的版本是0.5.3019，但我觉得就是这里出了问题，因此去NuGet库中下载了最新的包，下载地址为<a href="https://www.nuget.org/packages/Microsoft.MixedReality.QR#readme-body-tab">https://www.nuget.org/packages/Microsoft.MixedReality.QR#readme-body-tab</a></p><p><img data-src="https://imgse.com/i/zDVy3n" alt="图5"></p><p>我们下载文件到项目所在的路径，在Unity中导入资源包。（如果你的Unity中配置了NuGet管理的话，我们可以采取方法二，可以直接在Unity中点击NuGet-&gt;Management NuGet Package-&gt;online search Microsoft.MixedReality.QR进行搜索，点击安装即可）如图，我们安装了0.5.3037的包，这个时候我们再看一下Unity界面。发现已经不报错误了，而且Assets-&gt;Packages中也多了Microsoft.MixedReality.QR.0.5.3037，说明我们已经成功地解决了bug。(注意：这里特别注意，因为每个人的Unity在安装的时候选择的组件都不一样，所以建议大家仔细看看安装时的一些选项，针对Unity,其Unity Hub我觉得挺好用的，相当于是一个很好的前端交互界面，可以比较好地管理版本和创建项目，但是不要乱安装一些版本，因为其实Unity的每一个版本都挺大的，慎重，所以我当时在刚遇到这种错误的时候也尝试了安装与项目的构建时相同版本2020.3.38f1，但是当时这个版本下载不成功，可能也是就现在而言2020.3.38f1版本不稳定了，因此也就直接用目前的2021版本来进行项目构建)</p><p><img data-src="https://imgse.com/i/zDV2uV" alt="图6"><br><img data-src="https://imgse.com/i/zDVRBT" alt="图7"></p><p>打开这个场景，Play一下，不知道在干啥？？？因此,先写到这里吧。</p><h1 id="第二站"><a href="#第二站" class="headerlink" title="第二站"></a>第二站</h1><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p>1、微软官方的QR码追踪项目<a href="https://github.com/microsoft/MixedReality-QRCode-Sample">https://github.com/microsoft/MixedReality-QRCode-Sample</a></p>]]></content:encoded>
      
      
      
      <category domain="http://hhc99.github.io/tags/Hololens/">Hololens</category>
      
      
      <comments>http://hhc99.github.io/Hololens2%E7%B3%BB%E5%88%97/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>混合现实全息远程处理应用：MixedReality-HolographicRemoting-Samples</title>
      <link>http://hhc99.github.io/%E6%B7%B7%E5%90%88%E7%8E%B0%E5%AE%9E%E8%BF%9C%E7%A8%8B%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8/</link>
      <guid>http://hhc99.github.io/%E6%B7%B7%E5%90%88%E7%8E%B0%E5%AE%9E%E8%BF%9C%E7%A8%8B%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8/</guid>
      <pubDate>Fri, 02 Dec 2022 02:46:46 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;该示例是为了显示如何使用混合现实或者OpenXR运行时将内容流是传输到Microsoft Hololens2或运行Windows 混合现实的PC的示例。本着课题导向的原则，打算简单浏览一下实现功能即可，但是在我的课题中，主要是为了实现电脑的Unity画面实时显示在Hololens2设备之中，主要是通过全息远程处理API来实现，所以最后还是决定仔细阅读代码实现。&lt;br&gt;&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>该示例是为了显示如何使用混合现实或者OpenXR运行时将内容流是传输到Microsoft Hololens2或运行Windows 混合现实的PC的示例。本着课题导向的原则，打算简单浏览一下实现功能即可，但是在我的课题中，主要是为了实现电脑的Unity画面实时显示在Hololens2设备之中，主要是通过全息远程处理API来实现，所以最后还是决定仔细阅读代码实现。<br> <span id="more"></span></p><h1 id="内容剖析"><a href="#内容剖析" class="headerlink" title="内容剖析"></a>内容剖析</h1><p>首先，阅读一下README.md，梳理一下整个项目的文档。</p><table><thead><tr><th>文件&#x2F;文件夹</th><th>描述</th></tr></thead><tbody><tr><td>player</td><td>全息远程处理播放器示例代码</td></tr><tr><td>remote</td><td>全息远程处理示例代码</td></tr><tr><td>remote_openxr</td><td>使用OpenXR的全息远程处理示例代码</td></tr><tr><td>.clang-format</td><td>源代码样式格式</td></tr><tr><td>.editorconfig</td><td>标准editor配置的设置</td></tr><tr><td>.gitignore</td><td>定义在提交时要忽略的数据</td></tr><tr><td>CODE_OF_CONDUCT.md</td><td>有关Microsoft开源行为准则的详细信息</td></tr><tr><td>LICENSE</td><td>示例的许可证</td></tr><tr><td>README.md</td><td><strong>懂的都懂</strong></td></tr></tbody></table><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><h2 id="Holographic-Emulation-Mode-和-Holographic-Remoting-for-Play-Mode的区别："><a href="#Holographic-Emulation-Mode-和-Holographic-Remoting-for-Play-Mode的区别：" class="headerlink" title="Holographic Emulation Mode 和 Holographic Remoting for Play Mode的区别："></a>Holographic Emulation Mode 和 Holographic Remoting for Play Mode的区别：</h2><p>1、前者是仿真模式，后者是远程模式<br>2、全息远程处理（Holographic Remoting）允许你在连接到 Windows 全息设备 （Microsoft HoloLens） 后直接从编辑器运行应用程序。应用程序的行为就像部署到设备一样（具有完整的传感器数据和定位），但实际上将在主机上运行。游戏视图窗口还允许您查看设备上正在渲染的内容（当然，设备佩戴者从现实世界中看到的任何内容都没有）；全息模拟（Holographic Emulation）更进一步，允许你直接在编辑器中在模拟设备上运行, 换句话说，不需要物理设备。当你在团队之间共享的设备数量有限，或者你想要在获取物理硬件之前尽早开始全息开发时，这是一个很好的开发选择。我们是有AR设备的，因此采用全息远程模式。</p><h2 id="Open-XR"><a href="#Open-XR" class="headerlink" title="Open XR"></a>Open XR</h2><p>1、顾名思义，“Open XR”指的就是开放的某某(X）R（一般指的就是AR、VR、MR）,简单讲就是开源的、免费的可以对各种现实（Reality）平台和设备访问的集成化设计平台。<br>2、Unity在某一年之后取消了Project Setting -&gt; Player -&gt; XR Setting, 可能是放在XR Package中统一管理了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><p>1.微软官方教程 <a href="https://github.com/microsoft/MixedReality-HolographicRemoting-Samples">https://github.com/microsoft/MixedReality-HolographicRemoting-Samples</a><br>2、OpenXR | OpenXR是什么？一文带你全面了解OpenXR的相关知识，上车收藏不迷路<a href="https://cloud.tencent.com/developer/article/1955500">https://cloud.tencent.com/developer/article/1955500</a></p></blockquote>]]></content:encoded>
      
      
      
      <category domain="http://hhc99.github.io/tags/%E8%AF%BE%E9%A2%98/">课题</category>
      
      
      <comments>http://hhc99.github.io/%E6%B7%B7%E5%90%88%E7%8E%B0%E5%AE%9E%E8%BF%9C%E7%A8%8B%E5%A4%84%E7%90%86%E5%BA%94%E7%94%A8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C#学习</title>
      <link>http://hhc99.github.io/CSharp/</link>
      <guid>http://hhc99.github.io/CSharp/</guid>
      <pubDate>Tue, 29 Nov 2022 13:51:46 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;C-简介&quot;&gt;&lt;a href=&quot;#C-简介&quot; class=&quot;headerlink&quot; title=&quot;C#简介&quot;&gt;&lt;/a&gt;C#简介&lt;/h1&gt;&lt;p&gt;C#是一门接近于传统高级语言C和C++的现代的、通用的、面向对象的编程语言，其与Java非常相似，有许多强大的编程功能。但我是C++选手，所以下文的很多内容都将以C++语言作为对比来进行学习。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="C-简介"><a href="#C-简介" class="headerlink" title="C#简介"></a>C#简介</h1><p>C#是一门接近于传统高级语言C和C++的现代的、通用的、面向对象的编程语言，其与Java非常相似，有许多强大的编程功能。但我是C++选手，所以下文的很多内容都将以C++语言作为对比来进行学习。</p> <span id="more"></span><p>其主要的优势为：</p><ul><li>现代的、通用的编程语言</li><li>面向对象、面向组件、容易学习的结构化语言</li><li>可以在多种计算机平台上编译，产生高效率的程序，是.Net框架的一部分</li></ul><p>C#的一些重要的功能：</p><ul><li>布尔条件（Boolean Conditions）</li><li>自动垃圾回收（Automatic Garbage Collection)</li><li>标准库 （Standard Library）</li><li>组件版本（Assembly Versioning）</li><li>属性（Properties）和事件（Events）</li><li>委托（Delegates）和事件管理（Events Management）</li><li>易于使用的泛型（Generics）</li><li>索引器（Indexers）</li><li>条件编译（Conditional Compilation）</li><li>简单的多线程（Multithreading）</li><li>LINQ 和 Lambda 表达式</li><li>集成 Windows</li></ul><h1 id="C-环境"><a href="#C-环境" class="headerlink" title="C#环境"></a>C#环境</h1><h2 id="Net-框架（-Net-Framework）"><a href="#Net-框架（-Net-Framework）" class="headerlink" title=".Net 框架（.Net Framework）"></a>.Net 框架（.Net Framework）</h2><p>.Net 框架是一个创新的平台，能帮您编写出下面类型的应用程序：</p><ul><li>Windows 应用程序</li><li>Web 应用程序</li><li>Web 服务</li></ul><p>.Net 框架应用程序是多平台的应用程序。框架的设计方式使它适用于下列各种语言：C#、C++、Visual Basic、Jscript、COBOL 等等。所有这些语言可以访问框架，彼此之间也可以互相交互。</p><p>.Net 框架由一个巨大的代码库组成，用于 C# 等客户端语言。下面列出一些 .Net 框架的组件：</p><ul><li>公共语言运行库（Common Language Runtime CLR）</li><li>.Net 框架类库（.Net Framework Class Library）</li><li>公共语言规范（Common Language Specification）</li><li>通用类型系统（Common Type System）</li><li>元数据（Metadata）和组件（Assemblies）</li><li>Windows 窗体（Windows Forms）</li><li>ASP.Net 和 ASP.Net AJAX</li><li>ADO.Net</li><li>Windows 工作流基础（Windows Workflow Foundation WF）</li><li>Windows 显示基础（Windows Presentation Foundation）</li><li>Windows 通信基础（Windows Communication Foundation WCF）</li><li>LINQ</li></ul><h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C#基础"></a>C#基础</h2><h3 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C#程序结构"></a>C#程序结构</h3><p>所有的编程语言都逃不过”hello,world”, c#语言也是，这里，我们直接上代码，编写一个最简单的程序：</p><pre><code>using System;namespace HelloWorldApplication&#123;    class HelloWorld    &#123;      static void Main(string[] args)      &#123;         /* 我的第一个 C# 程序*/         Console.WriteLine(&quot;Hello World&quot;);         Console.ReadKey();      &#125;    &#125;&#125;</code></pre><p>这里，只需要注意一下，这里的程序结构是通过在命名空间来具体实现的。</p><p>基本语法中与C++的一些相同点：</p><ul><li>using、class关键字，using用于声明包含的命名空间，class用于声明一个类。</li><li>单行注释用&#x2F;&#x2F;，多行注释用&#x2F;* *&#x2F;，不同软件中也可以快速注释和取消注释，例如在Visual studio中Ctrl+K+C是快速注释，而Ctrl+K+U是取消注释。</li><li>成员函数和成员变量。</li><li>一些关键字和标识符的使用和作用。标识符是用来识别类、变量、函数或者任何其他用户定义的项目。</li></ul><h3 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C#数据类型"></a>C#数据类型</h3><p>在C#中，变量主要分为以下几种类型：</p><ul><li>值类型（Value types)</li><li>引用类型（Reference types)</li><li>指针类型（Pointer types)</li></ul><h4 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h4><p>值类型直接包含数据。比如 int、char、float，它们分别存储数字、字符、浮点数。当您声明一个 int 类型时，系统分配内存来存储值。  </p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。</p><p>换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。内置的 引用类型有：object、dynamic 和 string。</p><h5 id="对象（Object）类型"><a href="#对象（Object）类型" class="headerlink" title="对象（Object）类型"></a>对象（Object）类型</h5><p>对象（Object）类型 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型时，则被称为 装箱；另一方面，当一个对象类型转换为值类型时，则被称为 拆箱。</p><pre><code>object obj;obj = 100; // 这是装箱</code></pre><h5 id="动态（Dynamic）类型"><a href="#动态（Dynamic）类型" class="headerlink" title="动态（Dynamic）类型"></a>动态（Dynamic）类型</h5><p>您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。</p><p>声明动态类型的语法：</p><pre><code>dynamic &lt;variable_name&gt; = value;</code></pre><p>例如：</p><pre><code>dynamic d = 20;</code></pre><p>动态类型与对象类型相似，但是对象类型变量的类型检查是在<strong>编译</strong>时发生的，而动态类型变量的类型检查是在<strong>运行</strong>时发生的。（相当于静态多态和动态多态，静态多态是在编译期间完成的多态，编译器根据函数实参的类型（可能会进行隐式类型转换），可以推断出要调用那个函数，如果有对应的函数就调用该函数，否则出现编译错误，静态多态的实现方式主要有函数重载，包括普通函数的重载和成员函数的重载以及函数模板的使用；动态多态即动态绑定是运行时的多态，在程序执行期间（非编译期）判断所引用对象的实际类型，根据其实际类型调用相应的方法）——顺便复习一下C++。</p><h4 id="字符串（String）类型"><a href="#字符串（String）类型" class="headerlink" title="字符串（String）类型"></a>字符串（String）类型</h4><p>字符串（String）类型 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><p>例如：<br>    String str &#x3D; “runoob.com”;<br>一个 @引号字符串：</p><pre><code>@&quot;runoob.com&quot;;</code></pre><p>C#string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\）当作普通字符对待，比如：</p><pre><code>string str = @&quot;C:\Windows&quot;;</code></pre><p>等价于：</p><pre><code>string str = &quot;C:\\Windows&quot;;</code></pre><p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p><pre><code>string str = @&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt;    &lt;!--    --&gt;&lt;/script&gt;&quot;;</code></pre><p>用户自定义引用类型有：class、interface 或 delegate。</p><h4 id="指针类型（Pointer-types）"><a href="#指针类型（Pointer-types）" class="headerlink" title="指针类型（Pointer types）"></a>指针类型（Pointer types）</h4><p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。</p><p>声明指针类型的语法：</p><pre><code>type* identifier;</code></pre><p>例如：</p><pre><code>char* cptr;int* iptr;</code></pre><h3 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C#类型转换"></a>C#类型转换</h3><p>类型转换从根本上说是类型铸造，或者说是把数据从一种类型转换为另一种类型。在 C# 中，类型铸造有两种形式：</p><ul><li>隐式类型转换——这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li>显式类型转换——显式类型转换，即强制类型转换。显式转换需要强制转换运算符，而且强制转换会造成数据丢失。</li></ul><p>下面的实例显示了一个显式的类型转换：</p><pre><code>namespace TypeConversionApplication&#123;    class ExplicitConversion    &#123;        static void Main(string[] args)        &#123;            double d = 5673.74;            int i;            // 强制转换 double 为 int            i = (int)d;            Console.WriteLine(i);            Console.ReadKey();                   &#125;    &#125;&#125;</code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre><code>5673</code></pre><h3 id="C-变量"><a href="#C-变量" class="headerlink" title="C#变量"></a>C#变量</h3><p>一个变量只不过是一个供程序操作的存储区的名字。在 C# 中，每个变量都有一个特定的类型，类型决定了变量的内存大小和布局。范围内的值可以存储在内存中，可以对变量进行一系列操作。</p><p>我们已经讨论了各种数据类型。C# 中提供的基本的值类型大致可以分为以下几类：</p><p>|  类型  |举例 |<br>|———  | ——-|<br>| 整数类型     |   sbyte、byte、short、ushort、int、uint、long、ulong 和 char    |<br>|   浮点型     |        float 和 double                                     |<br>|  十进制类型    |  decimal                                     |<br>| 布尔类型    |true 或 false 值，指定的值                                       |<br>|空类型            | 可为空值的数据类型 |</p><h4 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C#中的变量定义"></a>C#中的变量定义</h4><p>C# 中变量定义的语法：</p><pre><code>&lt;data_type&gt; &lt;variable_list&gt;;</code></pre><p>在这里，data_type 必须是一个有效的 C# 数据类型，可以是 char、int、float、double 或其他用户自定义的数据类型。variable_list 可以由一个或多个用逗号分隔的标识符名称组成。</p><p>一些有效的变量定义如下所示：</p><pre><code>int i, j, k;char c, ch;float f, salary;double d;</code></pre><p>您可以在变量定义时进行初始化：</p><pre><code>int i = 100;</code></pre><h4 id="C-中的变量初始化"><a href="#C-中的变量初始化" class="headerlink" title="C#中的变量初始化"></a>C#中的变量初始化</h4><p>变量通过在等号后跟一个常量表达式进行初始化（赋值）。初始化的一般形式为：</p><pre><code>variable_name = value;</code></pre><p>变量可以在声明时被初始化（指定一个初始值）。初始化由一个等号后跟一个常量表达式组成，如下所示：</p><pre><code>&lt;data_type&gt; &lt;variable_name&gt; = value;</code></pre><p>一些实例：</p><pre><code>int d = 3, f = 5;/* 初始化 d 和 f. */byte z = 22; /* 初始化 z. */double pi = 3.14159; /* 声明 pi 的近似值 */char x = &#39;x&#39;;/* 变量 x 的值为 &#39;x&#39; */</code></pre><p>正确地初始化变量是一个良好的编程习惯，否则有时程序会产生意想不到的结果。</p><p>请看下面的实例，使用了各种类型的变量：</p><pre><code>namespace VariableDefinition&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            short a;            int b ;            double c;            /* 实际初始化 */            a = 10;            b = 20;            c = a + b;            Console.WriteLine(&quot;a = &#123;0&#125;, b = &#123;1&#125;, c = &#123;2&#125;&quot;, a, b, c);            Console.ReadLine();        &#125;    &#125;&#125;</code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre><code>a = 10, b = 20, c = 30</code></pre><h4 id="接受来自用户的值"><a href="#接受来自用户的值" class="headerlink" title="接受来自用户的值"></a>接受来自用户的值</h4><p>System 命名空间中的 Console 类提供了一个函数 ReadLine()，用于接收来自用户的输入，并把它存储到一个变量中。<br>例如：</p><pre><code>int num;num = Convert.ToInt32(Console.ReadLine());</code></pre><p>函数 Convert.ToInt32() 把用户输入的数据转换为 int 数据类型，因为 Console.ReadLine() 只接受字符串格式的数据。</p><h4 id="C-中的-Lvalues-和-Rvalues"><a href="#C-中的-Lvalues-和-Rvalues" class="headerlink" title="C#中的 Lvalues 和 Rvalues"></a>C#中的 Lvalues 和 Rvalues</h4><p>C# 中的两种表达式：</p><ol><li><p>lvalue：lvalue 表达式可以出现在赋值语句的左边或右边。</p></li><li><p>rvalue：rvalue 表达式可以出现在赋值语句的右边，不能出现在赋值语句的左边。</p></li></ol><p>变量是 lvalue 的，所以可以出现在赋值语句的左边。数值是 rvalue 的，因此不能被赋值，不能出现在赋值语句的左边。下面是一个有效的语句：</p><pre><code>int g = 20;</code></pre><p>下面是一个无效的语句，会产生编译时错误：</p><pre><code>10 = 20;</code></pre><h4 id="C-常量"><a href="#C-常量" class="headerlink" title="C#常量"></a>C#常量</h4><p>常量是固定值，程序执行期间不会改变。常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量或者字符串常量，还有枚举常量。</p><p>常量可以被当作常规的变量，只是它们的值在定义后不能被修改。</p><h4 id="C-运算符"><a href="#C-运算符" class="headerlink" title="C#运算符"></a>C#运算符</h4><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C# 有丰富的内置运算符，分类如下：</p><ul><li>算术运算符</li><li>关系运算符</li><li>逻辑运算符</li><li>位运算符</li><li>赋值运算符</li><li>其他运算符</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote><ol><li>菜鸟教程-C#教程 <a href="https://www.runoob.com/csharp/csharp-tutorial.html">https://www.runoob.com/csharp/csharp-tutorial.html</a></li></ol></blockquote>]]></content:encoded>
      
      
      
      <category domain="http://hhc99.github.io/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/">编程学习</category>
      
      
      <comments>http://hhc99.github.io/CSharp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>王卡不网卡</title>
      <link>http://hhc99.github.io/hello-world/</link>
      <guid>http://hhc99.github.io/hello-world/</guid>
      <pubDate>Sun, 27 Nov 2022 09:51:38 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;欢迎各位访客来到王卡的博客，大家一起学习进步！！&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://github.com/hhc99&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>欢迎各位访客来到王卡的博客，大家一起学习进步！！</p><p>More info: <a href="https://github.com/hhc99">Github</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://hhc99.github.io/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
