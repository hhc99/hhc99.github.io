<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Dreamside Maroon</title>
    <link>http://hhc99.github.io/</link>
    
    <atom:link href="http://hhc99.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Stay hungry, stay foolish</description>
    <pubDate>Tue, 29 Nov 2022 13:52:42 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>CSharp</title>
      <link>http://hhc99.github.io/CSharp/</link>
      <guid>http://hhc99.github.io/CSharp/</guid>
      <pubDate>Tue, 29 Nov 2022 13:51:46 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;C-简介&quot;&gt;&lt;a href=&quot;#C-简介&quot; class=&quot;headerlink&quot; title=&quot;C#简介&quot;&gt;&lt;/a&gt;C#简介&lt;/h1&gt;&lt;p&gt;C#是一门接近于传统高级语言C和C++的现代的、通用的、面向对象的编程语言，其与Java非常相似，有许多强大的编程功能。但我是C++选手，所以下文的很多内容都将以C++语言作为对比来进行学习。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="C-简介"><a href="#C-简介" class="headerlink" title="C#简介"></a>C#简介</h1><p>C#是一门接近于传统高级语言C和C++的现代的、通用的、面向对象的编程语言，其与Java非常相似，有许多强大的编程功能。但我是C++选手，所以下文的很多内容都将以C++语言作为对比来进行学习。</p> <span id="more"></span><p>其主要的优势为：</p><ul><li>现代的、通用的编程语言</li><li>面向对象、面向组件、容易学习的结构化语言</li><li>可以在多种计算机平台上编译，产生高效率的程序，是.Net框架的一部分</li></ul><p>C#的一些重要的功能：</p><ul><li>布尔条件（Boolean Conditions）</li><li>自动垃圾回收（Automatic Garbage Collection)</li><li>标准库 （Standard Library）</li><li>组件版本（Assembly Versioning）</li><li>属性（Properties）和事件（Events）</li><li>委托（Delegates）和事件管理（Events Management）</li><li>易于使用的泛型（Generics）</li><li>索引器（Indexers）</li><li>条件编译（Conditional Compilation）</li><li>简单的多线程（Multithreading）</li><li>LINQ 和 Lambda 表达式</li><li>集成 Windows</li></ul><h1 id="C-环境"><a href="#C-环境" class="headerlink" title="C#环境"></a>C#环境</h1><h2 id="Net-框架（-Net-Framework）"><a href="#Net-框架（-Net-Framework）" class="headerlink" title=".Net 框架（.Net Framework）"></a>.Net 框架（.Net Framework）</h2><p>.Net 框架是一个创新的平台，能帮您编写出下面类型的应用程序：</p><ul><li>Windows 应用程序</li><li>Web 应用程序</li><li>Web 服务</li></ul><p>.Net 框架应用程序是多平台的应用程序。框架的设计方式使它适用于下列各种语言：C#、C++、Visual Basic、Jscript、COBOL 等等。所有这些语言可以访问框架，彼此之间也可以互相交互。</p><p>.Net 框架由一个巨大的代码库组成，用于 C# 等客户端语言。下面列出一些 .Net 框架的组件：</p><ul><li>公共语言运行库（Common Language Runtime CLR）</li><li>.Net 框架类库（.Net Framework Class Library）</li><li>公共语言规范（Common Language Specification）</li><li>通用类型系统（Common Type System）</li><li>元数据（Metadata）和组件（Assemblies）</li><li>Windows 窗体（Windows Forms）</li><li>ASP.Net 和 ASP.Net AJAX</li><li>ADO.Net</li><li>Windows 工作流基础（Windows Workflow Foundation WF）</li><li>Windows 显示基础（Windows Presentation Foundation）</li><li>Windows 通信基础（Windows Communication Foundation WCF）</li><li>LINQ</li></ul><h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C#基础"></a>C#基础</h2><h3 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C#程序结构"></a>C#程序结构</h3><p>所有的编程语言都逃不过”hello,world”, c#语言也是，这里，我们直接上代码，编写一个最简单的程序：</p><pre><code>using System;namespace HelloWorldApplication&#123;    class HelloWorld    &#123;      static void Main(string[] args)      &#123;         /* 我的第一个 C# 程序*/         Console.WriteLine(&quot;Hello World&quot;);         Console.ReadKey();      &#125;    &#125;&#125;</code></pre><p>这里，只需要注意一下，这里的程序结构是通过在命名空间来具体实现的。</p><p>基本语法中与C++的一些相同点：</p><ul><li>using、class关键字，using用于声明包含的命名空间，class用于声明一个类。</li><li>单行注释用&#x2F;&#x2F;，多行注释用&#x2F;* *&#x2F;，不同软件中也可以快速注释和取消注释，例如在Visual studio中Ctrl+K+C是快速注释，而Ctrl+K+U是取消注释。</li><li>成员函数和成员变量。</li><li>一些关键字和标识符的使用和作用。标识符是用来识别类、变量、函数或者任何其他用户定义的项目。</li></ul><h3 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C#数据类型"></a>C#数据类型</h3><p>在C#中，变量主要分为以下几种类型：</p><ul><li>值类型（Value types)</li><li>引用类型（Reference types)</li><li>指针类型（Pointer types)</li></ul><h4 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h4><p>值类型直接包含数据。比如 int、char、float，它们分别存储数字、字符、浮点数。当您声明一个 int 类型时，系统分配内存来存储值。  </p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。</p><p>换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。内置的 引用类型有：object、dynamic 和 string。</p><h5 id="对象（Object）类型"><a href="#对象（Object）类型" class="headerlink" title="对象（Object）类型"></a>对象（Object）类型</h5><p>对象（Object）类型 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型时，则被称为 装箱；另一方面，当一个对象类型转换为值类型时，则被称为 拆箱。</p><pre><code>object obj;obj = 100; // 这是装箱</code></pre><h5 id="动态（Dynamic）类型"><a href="#动态（Dynamic）类型" class="headerlink" title="动态（Dynamic）类型"></a>动态（Dynamic）类型</h5><p>您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。</p><p>声明动态类型的语法：</p><pre><code>dynamic &lt;variable_name&gt; = value;</code></pre><p>例如：</p><pre><code>dynamic d = 20;</code></pre><p>动态类型与对象类型相似，但是对象类型变量的类型检查是在<strong>编译</strong>时发生的，而动态类型变量的类型检查是在<strong>运行</strong>时发生的。（相当于静态多态和动态多态，静态多态是在编译期间完成的多态，编译器根据函数实参的类型（可能会进行隐式类型转换），可以推断出要调用那个函数，如果有对应的函数就调用该函数，否则出现编译错误，静态多态的实现方式主要有函数重载，包括普通函数的重载和成员函数的重载以及函数模板的使用；动态多态即动态绑定是运行时的多态，在程序执行期间（非编译期）判断所引用对象的实际类型，根据其实际类型调用相应的方法）——顺便复习一下C++。</p><h4 id="字符串（String）类型"><a href="#字符串（String）类型" class="headerlink" title="字符串（String）类型"></a>字符串（String）类型</h4><p>字符串（String）类型 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><p>例如：<br>    String str &#x3D; “runoob.com”;<br>一个 @引号字符串：</p><pre><code>@&quot;runoob.com&quot;;</code></pre><p>C#string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\）当作普通字符对待，比如：</p><pre><code>string str = @&quot;C:\Windows&quot;;</code></pre><p>等价于：</p><pre><code>string str = &quot;C:\\Windows&quot;;</code></pre><p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p><pre><code>string str = @&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt;    &lt;!--    --&gt;&lt;/script&gt;&quot;;</code></pre><p>用户自定义引用类型有：class、interface 或 delegate。</p><h4 id="指针类型（Pointer-types）"><a href="#指针类型（Pointer-types）" class="headerlink" title="指针类型（Pointer types）"></a>指针类型（Pointer types）</h4><p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。</p><p>声明指针类型的语法：</p><pre><code>type* identifier;</code></pre><p>例如：</p><pre><code>char* cptr;int* iptr;</code></pre><h3 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C#类型转换"></a>C#类型转换</h3><p>类型转换从根本上说是类型铸造，或者说是把数据从一种类型转换为另一种类型。在 C# 中，类型铸造有两种形式：</p><ul><li>隐式类型转换——这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li>显式类型转换——显式类型转换，即强制类型转换。显式转换需要强制转换运算符，而且强制转换会造成数据丢失。</li></ul><p>下面的实例显示了一个显式的类型转换：</p><pre><code>namespace TypeConversionApplication&#123;    class ExplicitConversion    &#123;        static void Main(string[] args)        &#123;            double d = 5673.74;            int i;            // 强制转换 double 为 int            i = (int)d;            Console.WriteLine(i);            Console.ReadKey();                   &#125;    &#125;&#125;</code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre><code>5673</code></pre><h3 id="C-变量"><a href="#C-变量" class="headerlink" title="C#变量"></a>C#变量</h3><p>一个变量只不过是一个供程序操作的存储区的名字。在 C# 中，每个变量都有一个特定的类型，类型决定了变量的内存大小和布局。范围内的值可以存储在内存中，可以对变量进行一系列操作。</p><p>我们已经讨论了各种数据类型。C# 中提供的基本的值类型大致可以分为以下几类：</p><p>|  类型  |举例 |<br>|———  | ——-|<br>| 整数类型     |   sbyte、byte、short、ushort、int、uint、long、ulong 和 char    |<br>|   浮点型     |        float 和 double                                     |<br>|  十进制类型    |  decimal                                     |<br>| 布尔类型    |true 或 false 值，指定的值                                       |<br>|空类型            | 可为空值的数据类型 |</p><h4 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C#中的变量定义"></a>C#中的变量定义</h4><p>C# 中变量定义的语法：</p><pre><code>&lt;data_type&gt; &lt;variable_list&gt;;</code></pre><p>在这里，data_type 必须是一个有效的 C# 数据类型，可以是 char、int、float、double 或其他用户自定义的数据类型。variable_list 可以由一个或多个用逗号分隔的标识符名称组成。</p><p>一些有效的变量定义如下所示：</p><pre><code>int i, j, k;char c, ch;float f, salary;double d;</code></pre><p>您可以在变量定义时进行初始化：</p><pre><code>int i = 100;</code></pre><h4 id="C-中的变量初始化"><a href="#C-中的变量初始化" class="headerlink" title="C#中的变量初始化"></a>C#中的变量初始化</h4><p>变量通过在等号后跟一个常量表达式进行初始化（赋值）。初始化的一般形式为：</p><pre><code>variable_name = value;</code></pre><p>变量可以在声明时被初始化（指定一个初始值）。初始化由一个等号后跟一个常量表达式组成，如下所示：</p><pre><code>&lt;data_type&gt; &lt;variable_name&gt; = value;</code></pre><p>一些实例：</p><pre><code>int d = 3, f = 5;/* 初始化 d 和 f. */byte z = 22; /* 初始化 z. */double pi = 3.14159; /* 声明 pi 的近似值 */char x = &#39;x&#39;;/* 变量 x 的值为 &#39;x&#39; */</code></pre><p>正确地初始化变量是一个良好的编程习惯，否则有时程序会产生意想不到的结果。</p><p>请看下面的实例，使用了各种类型的变量：</p><pre><code>namespace VariableDefinition&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            short a;            int b ;            double c;            /* 实际初始化 */            a = 10;            b = 20;            c = a + b;            Console.WriteLine(&quot;a = &#123;0&#125;, b = &#123;1&#125;, c = &#123;2&#125;&quot;, a, b, c);            Console.ReadLine();        &#125;    &#125;&#125;</code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre><code>a = 10, b = 20, c = 30</code></pre><h4 id="接受来自用户的值"><a href="#接受来自用户的值" class="headerlink" title="接受来自用户的值"></a>接受来自用户的值</h4><p>System 命名空间中的 Console 类提供了一个函数 ReadLine()，用于接收来自用户的输入，并把它存储到一个变量中。<br>例如：</p><pre><code>int num;num = Convert.ToInt32(Console.ReadLine());</code></pre><p>函数 Convert.ToInt32() 把用户输入的数据转换为 int 数据类型，因为 Console.ReadLine() 只接受字符串格式的数据。</p><h4 id="C-中的-Lvalues-和-Rvalues"><a href="#C-中的-Lvalues-和-Rvalues" class="headerlink" title="C#中的 Lvalues 和 Rvalues"></a>C#中的 Lvalues 和 Rvalues</h4><p>C# 中的两种表达式：</p><ol><li><p>lvalue：lvalue 表达式可以出现在赋值语句的左边或右边。</p></li><li><p>rvalue：rvalue 表达式可以出现在赋值语句的右边，不能出现在赋值语句的左边。</p></li></ol><p>变量是 lvalue 的，所以可以出现在赋值语句的左边。数值是 rvalue 的，因此不能被赋值，不能出现在赋值语句的左边。下面是一个有效的语句：</p><pre><code>int g = 20;</code></pre><p>下面是一个无效的语句，会产生编译时错误：</p><pre><code>10 = 20;</code></pre><h4 id="C-常量"><a href="#C-常量" class="headerlink" title="C#常量"></a>C#常量</h4><p>常量是固定值，程序执行期间不会改变。常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量或者字符串常量，还有枚举常量。</p><p>常量可以被当作常规的变量，只是它们的值在定义后不能被修改。</p>]]></content:encoded>
      
      
      
      <category domain="http://hhc99.github.io/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/">编程学习</category>
      
      
      <comments>http://hhc99.github.io/CSharp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>王卡不网卡</title>
      <link>http://hhc99.github.io/hello-world/</link>
      <guid>http://hhc99.github.io/hello-world/</guid>
      <pubDate>Sun, 27 Nov 2022 09:51:38 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;欢迎各位访客来到王卡的博客，大家一起学习进步！！&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;More info: &lt;a href=&quot;https://https//github.com/</description>
        
      
      
      
      <content:encoded><![CDATA[<p>欢迎各位访客来到王卡的博客，大家一起学习进步！！</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>More info: <a href="https://https//github.com/hhc99">Github</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://hhc99.github.io/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
