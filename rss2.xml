<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Dreamside Maroon</title>
    <link>http://hhc99.github.io/</link>
    
    <atom:link href="http://hhc99.github.io/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>Stay hungry, stay foolish</description>
    <pubDate>Tue, 06 Dec 2022 01:08:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>算法-十大排序</title>
      <link>http://hhc99.github.io/%E7%AE%97%E6%B3%95-%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/</link>
      <guid>http://hhc99.github.io/%E7%AE%97%E6%B3%95-%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/</guid>
      <pubDate>Tue, 06 Dec 2022 01:06:11 GMT</pubDate>
      
      
      
      
      
      <category domain="http://hhc99.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/">数据结构与算法</category>
      
      
      <comments>http://hhc99.github.io/%E7%AE%97%E6%B3%95-%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>随心记</title>
      <link>http://hhc99.github.io/%E9%9A%8F%E5%BF%83%E8%AE%B0/</link>
      <guid>http://hhc99.github.io/%E9%9A%8F%E5%BF%83%E8%AE%B0/</guid>
      <pubDate>Sat, 03 Dec 2022 13:02:51 GMT</pubDate>
      
        
        
      <description>&lt;h1 id=&quot;邮件管理-POP3、SMAP、IMAP&quot;&gt;&lt;a href=&quot;#邮件管理-POP3、SMAP、IMAP&quot; class=&quot;headerlink&quot; title=&quot;邮件管理-POP3、SMAP、IMAP&quot;&gt;&lt;/a&gt;邮件管理-POP3、SMAP、IMAP&lt;/h1&gt;&lt;p&gt;简单</description>
        
      
      
      
      <content:encoded><![CDATA[<h1 id="邮件管理-POP3、SMAP、IMAP"><a href="#邮件管理-POP3、SMAP、IMAP" class="headerlink" title="邮件管理-POP3、SMAP、IMAP"></a>邮件管理-POP3、SMAP、IMAP</h1><p>简单地说，SMTP管‘发’， POP3&#x2F;IMAP管‘收’。</p><h2 id="SMTP-Simple-Mail-Transfer-Protocol"><a href="#SMTP-Simple-Mail-Transfer-Protocol" class="headerlink" title="SMTP-Simple Mail Transfer Protocol"></a>SMTP-Simple Mail Transfer Protocol</h2><p>简单邮件传输协议。它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转方式。SMTP 协议属于 TCP&#x2F;IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。SMTP 服务器就是遵循 SMTP 协议的发送邮件服务器。SMTP 认证，简单地说就是要求必须在提供了账户名和密码之后才可以登录 SMTP 服务器，这就使得那些垃圾邮件的散播者无可乘之机。</p><h2 id="POP3-Post-Office-Protocol3"><a href="#POP3-Post-Office-Protocol3" class="headerlink" title="POP3-Post Office Protocol3"></a>POP3-Post Office Protocol3</h2><p>邮局协议的第三个版本，它规定怎样将个人计算机连接到Internet的邮件服务器和下载电子邮件的电子协议。 它是因特网电子邮件的第一个离线协议标准,POP3允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上,同时删除保存在邮件服务器上的邮件，而POP3服务器则是遵循POP3协议的接收邮件服务器，用来接收电子邮件的。</p><h2 id="IMAP-Internet-Mail-Access-Protocol"><a href="#IMAP-Internet-Mail-Access-Protocol" class="headerlink" title="IMAP-Internet Mail Access Protocol"></a>IMAP-Internet Mail Access Protocol</h2><p>交互式邮件存取协议，它是跟POP3类似邮件访问标准协议之一。不同的是，开启了IMAP后，您在电子邮件客户端收取的邮件仍然保留在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。所以无论从浏览器登录邮箱或者客户端软件登录邮箱，看到的邮件以及状态都是一致的。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>1、<a href="http://help.163.com/09/1223/14/5R7P6CJ600753VB8.html">http://help.163.com/09/1223/14/5R7P6CJ600753VB8.html</a></p>]]></content:encoded>
      
      
      
      <category domain="http://hhc99.github.io/tags/%E6%90%AC%E8%BF%90%E5%B7%A5/">搬运工</category>
      
      
      <comments>http://hhc99.github.io/%E9%9A%8F%E5%BF%83%E8%AE%B0/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Hololens2和Unity无线远程部署</title>
      <link>http://hhc99.github.io/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/</link>
      <guid>http://hhc99.github.io/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/</guid>
      <pubDate>Sat, 03 Dec 2022 05:03:23 GMT</pubDate>
      
      <description>&lt;p&gt;陆陆续续摸索了几天，游走于CSDN和Github之间查找解决方案，主要参考的是微软官方的解决文档及开源项目，接下来主要就是记录一些在过程中随机遇到的问题和最终采取的解决方法的一些流水帐，也是方便日后自己做一些回顾和提前的整理。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>陆陆续续摸索了几天，游走于CSDN和Github之间查找解决方案，主要参考的是微软官方的解决文档及开源项目，接下来主要就是记录一些在过程中随机遇到的问题和最终采取的解决方法的一些流水帐，也是方便日后自己做一些回顾和提前的整理。</p> <span id="more"></span><h1 id="第一站"><a href="#第一站" class="headerlink" title="第一站"></a>第一站</h1><p>我这边的配置是：</p><ul><li>Unity2021.3.13f1c1版本</li><li>Window11 SDk(10.0.22000.0)和Windows10 SDK(10.0.19041.0)</li><li>Hololens2</li><li>VisualStudio2019</li></ul><p>微软官方使用的是Unity2020版本，主要是涉及到了一个Unity版本兼容性的问题。</p><p>首先，从微软官方下载此项目，可以去参考文档1里的github进行下载，这里也放一个百度网盘的下载链接：<a href="2222">2222</a><br>解压里面的MixedReality-QRCode-Sample，简单介绍一下文件的主要组成：</p><table><thead><tr><th>文件&#x2F;文件夹</th><th>描述</th></tr></thead><tbody><tr><td>Samples&#x2F;Assets</td><td>主要包含的Unity的资产、场景、预制件和脚本</td></tr><tr><td>Samples&#x2F;Packages</td><td>项目清单和一些资源包</td></tr><tr><td>Samples&#x2F;ProjectSettings</td><td>Unity资源的设置文件</td></tr><tr><td>Samples&#x2F;UserSettings</td><td>从Unity生成的用户设置</td></tr><tr><td>.gitignore</td><td>定义提交时要忽略的内容</td></tr><tr><td>README.md</td><td><strong>必读文件</strong></td></tr><tr><td>LICENSE</td><td><strong>不要侵犯别人的版权,虽然但是一般我不咋看</strong></td></tr></tbody></table><p>切入正题，直接点击<strong>Sample-&gt;Assets-&gt;QRCodesSample.unity</strong>，这就是一般的打开Unity场景的方法,这里我是用Unity Hub来管理Unity的，我觉得比较方便，但是上文已经说到，这个项目其实是导入的Unity2020版本的生成文档，因此必然会和我的有冲突，接下来，用图来辅助描述：</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE1.png" class title="图1"><p>如图所示，就出现已保存的项目（2020.3.38f1）的版本与当前运行的编辑器（2021.3.13f1c1）不符的问题，我们选择继续。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE2.png" class title="图2"><p>我们选择Enter Safe Mode。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE3.png" class title="图3"><p>结果显示出现了bug,我们仔细看看，其实是关于一些命名空间的问题，我查来查去，发现是构想项目的过程中缺少包的问题，这里我们还是用VS2019打开查看一下。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE4.png" class title="图4"><p>最后其实我的解决方案是安装了最新的.Nupkg包，当时我第一次接触到这个类型的包，也不知道是啥，也是搜了一段时间，我的理解就是一种特殊的压缩包，有专门的管理包库NuGet，其实这种包有一种很简单查看内容的方法，就是把后缀名改成.rar文件，然后对整个文件进行解压缩，就可以对这个文件中的内容进行查看。这里我们仔细看一下上图中的Microsoft.MixedReality.QR的版本是0.5.3019，但我觉得就是这里出了问题，因此去NuGet库中下载了最新的包，下载地址为<a href="https://www.nuget.org/packages/Microsoft.MixedReality.QR#readme-body-tab">https://www.nuget.org/packages/Microsoft.MixedReality.QR#readme-body-tab</a></p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE5.png" class title="图5"><p>我们下载文件到项目所在的路径，在Unity中导入资源包。（如果你的Unity中配置了NuGet管理的话，我们可以采取方法二，可以直接在Unity中点击NuGet-&gt;Management NuGet Package-&gt;online search Microsoft.MixedReality.QR进行搜索，点击安装即可）如图，我们安装了0.5.3037的包，这个时候我们再看一下Unity界面。发现已经不报错误了，而且Assets-&gt;Packages中也多了Microsoft.MixedReality.QR.0.5.3037，说明我们已经成功地解决了bug。(注意：这里特别注意，因为每个人的Unity在安装的时候选择的组件都不一样，所以建议大家仔细看看安装时的一些选项，针对Unity,其Unity Hub我觉得挺好用的，相当于是一个很好的前端交互界面，可以比较好地管理版本和创建项目，但是不要乱安装一些版本，因为其实Unity的每一个版本都挺大的，慎重，所以我当时在刚遇到这种错误的时候也尝试了安装与项目的构建时相同版本2020.3.38f1，但是当时这个版本下载不成功，可能也是就现在而言2020.3.38f1版本不稳定了，因此也就直接用目前的2021版本来进行项目构建)</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE6.png" class title="图6"><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE7.png" class title="图7"><p>打开这个场景，Play一下，不知道在干啥？？？因此,先写到这里吧。</p><h1 id="第二站"><a href="#第二站" class="headerlink" title="第二站"></a>第二站</h1><h1 id="第三站"><a href="#第三站" class="headerlink" title="第三站"></a>第三站</h1><p>第三站是全息远程处理示例，演示如何编写应用程序以将内容流式传输到运行具有混合现实或者OpenXR运行的Windows混合现实的Microsoft Hololens2或者电脑的示例。我们的项目链接是<a href></a>中的<strong>MixedReality-HolographicRemoting_Samples</strong>。</p><p>该示例是为了显示如何使用混合现实或者OpenXR运行时将内容流是传输到Microsoft Hololens2或运行Windows 混合现实的PC的示例。本着课题导向的原则，打算简单浏览一下实现功能即可，但是在我的课题中，主要是为了实现电脑的Unity画面实时显示在Hololens2设备之中，主要是通过全息远程处理API来实现，所以最后还是决定仔细阅读代码实现。<br> <!-- more --></p><h1 id="内容剖析"><a href="#内容剖析" class="headerlink" title="内容剖析"></a>内容剖析</h1><p>首先，阅读一下README.md，梳理一下整个项目的文档。</p><table><thead><tr><th>文件&#x2F;文件夹</th><th>描述</th></tr></thead><tbody><tr><td>player</td><td>全息远程处理播放器示例代码</td></tr><tr><td>remote</td><td>全息远程处理示例代码</td></tr><tr><td>remote_openxr</td><td>使用OpenXR的全息远程处理示例代码</td></tr><tr><td>.clang-format</td><td>源代码样式格式</td></tr><tr><td>.editorconfig</td><td>标准editor配置的设置</td></tr><tr><td>.gitignore</td><td>定义在提交时要忽略的数据</td></tr><tr><td>CODE_OF_CONDUCT.md</td><td>有关Microsoft开源行为准则的详细信息</td></tr><tr><td>LICENSE</td><td>示例的许可证</td></tr><tr><td>README.md</td><td><strong>懂的都懂</strong></td></tr></tbody></table><p>接下来的主要操作参考主要的几个微软官方的教程链接来实现全息远程处理。</p><p>主线路是<a href="https://learn.microsoft.com/zh-cn/training/modules/pc-holographic-remoting-tutorials/2-get-started-with-pc-holographic-remoting">创建全息远程处理应用以在Hololens2上直观呈现3D内容</a></p><p>我们的配置还是上述的第一站中的配置。</p><p>首先，我们前置知识了解了之后，直接来到第三单元的<strong>创建和准备Unity项目</strong>。我们先转到<a href="https://learn.microsoft.com/zh-cn/training/modules/learn-mrtk-tutorials/1-1-introduction">初始化项目并且部署第一个应用程序</a>一文中并按照其中的说明操作创建和准备Unity项目。</p><p>先按照操作一步步执行<strong>初始化项目并且部署第一个应用程序</strong>。这里导入的混合现实功能工具的最新版本（目前是2.8.2）以及相关的资源我打包好了在百度网盘的链接中<a href></a>，其中的<strong>MRTK</strong>即问下载的资源。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE8.png" class title="图8"><p>这里，特别注意这里需要选择的文件夹下必须包含Assets,Packages和ProjectSettings子目录，所以建议大家保存在我们自己刚才建立的该项Unity项目下，然后其他的都选择默认即可，生成的会默认生成一个’_’来代表值。</p><p>按照操作导入之后，会显示需要restart（重启）一下，点击yes</p><p>出现如下的界面，表示成功。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE9.png" class title="图9"><p>出现类似下列的警告，选择Fix All即可。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE10.png" class title="图10"><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE11.png" class title="图11"><p>选择如下：（有警告就Fix）</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE12.png" class title="图12"><p>命名一下：</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE13.png" class title="图13"><p><strong>注意：不需要继续执行</strong>交互模型<strong>之后的部分</strong></p><p>打开MRTK导入TextMeshPro Essential资源,（一直Next直到出现Import TextMeshPro Essential）,导入即可。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE14.png" class title="图14"><p>出现如下界面，表示导入成功</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE15.png" class title="图15"><p>接下来，不用继续进行了。我们转入下一个链接<a href="https://learn.microsoft.com/zh-cn/windows/mixed-reality/mrtk-unity/mrtk2/features/spatial-awareness/spatial-awareness-getting-started?view=mrtkunity-2022-05">空间感知入门</a></p><p>如下图的操作所示，进入MRTk配置文件，如果出现了黄色感叹号警告，则选择<strong>clone</strong>，一直到没有感叹号为止，文件的命名和存储路径都默认即可，然后选择spatial Awareness,把黄色的感叹号处理一下，一直默认clone，直到所有的黄色感叹号都消失。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE16.png" class title="图16"><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE17.png" class title="图17"><p>将滑到最下方，将XR SDk Windows Mixed Reality Spatial Mesh Observer -&gt; Display Setting -&gt; Display Option改为遮挡。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE18.png" class title="图18"><p>做到这里，我们就把图19中展示的所有前置条件都配置好了。</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE19.png" class title="图19"><p>接下来，我们导入环境资源，环境资源也在我们刚才下载的<strong>MRTK</strong>文件中，如下图所示：</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE20.png" class title="图20"><p>选择 资源 -&gt; 导入包 -&gt; 自定义包</p><p>选择图20中的包进行导入。</p><p>接着按照配置和准备教程进行操作。</p><p>我选择的是生成到UMP平台，生成完之后，我们需要在Hololens2来安装远程播放器（Holographic remoting），要实现远程操作，需要让电脑和Hololens2连接到同一个IP上，这里建议可以买一个路由器，我用的手机wifi,不是很稳定，我们连接上之后，在Unity任务栏中选择<br>**Windows -&gt; XR -&gt; Holographic Remoting for Play Mode **,输入IP，修改界面如下：</p><img data-src="/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/%E5%9B%BE21.png" class title="图21"><p>点击Play，即产生了如下的画面</p><p>{按时打算发的}</p><h1 id="杂记"><a href="#杂记" class="headerlink" title="杂记"></a>杂记</h1><h2 id="Holographic-Emulation-Mode-和-Holographic-Remoting-for-Play-Mode的区别："><a href="#Holographic-Emulation-Mode-和-Holographic-Remoting-for-Play-Mode的区别：" class="headerlink" title="Holographic Emulation Mode 和 Holographic Remoting for Play Mode的区别："></a>Holographic Emulation Mode 和 Holographic Remoting for Play Mode的区别：</h2><p>1、前者是仿真模式，后者是远程模式。</p><p>2、全息远程处理（Holographic Remoting）允许你在连接到 Windows 全息设备 （Microsoft HoloLens） 后直接从编辑器运行应用程序。应用程序的行为就像部署到设备一样（具有完整的传感器数据和定位），但实际上将在主机上运行。游戏视图窗口还允许您查看设备上正在渲染的内容（当然，设备佩戴者从现实世界中看到的任何内容都没有）；全息模拟（Holographic Emulation）更进一步，允许你直接在编辑器中在模拟设备上运行, 换句话说，不需要物理设备。当你在团队之间共享的设备数量有限，或者你想要在获取物理硬件之前尽早开始全息开发时，这是一个很好的开发选择。我们是有AR设备的，因此采用全息远程模式。</p><h2 id="Open-XR"><a href="#Open-XR" class="headerlink" title="Open XR"></a>Open XR</h2><p>1、顾名思义，“Open XR”指的就是开放的某某(X）R（一般指的就是AR、VR、MR）,简单讲就是开源的、免费的可以对各种现实（Reality）平台和设备访问的集成化设计平台。</p><p>2、Unity的XR Setting在某一年之后取消了Project Setting -&gt; Player -&gt; XR Setting, 可能是放在XR Package中统一管理了。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><blockquote><p>、微软官方的QR码追踪项目<a href="https://github.com/microsoft/MixedReality-QRCode-Sample">https://github.com/microsoft/MixedReality-QRCode-Sample</a></p><p>、微软官方教程 <a href="https://github.com/microsoft/MixedReality-HolographicRemoting-Samples">https://github.com/microsoft/MixedReality-HolographicRemoting-Samples</a></p><p>、OpenXR | OpenXR是什么？一文带你全面了解OpenXR的相关知识，上车收藏不迷路<a href="https://cloud.tencent.com/developer/article/1955500">https://cloud.tencent.com/developer/article/1955500</a></p></blockquote>]]></content:encoded>
      
      
      
      <category domain="http://hhc99.github.io/tags/Hololens/">Hololens</category>
      
      
      <comments>http://hhc99.github.io/Hololens2%E5%92%8CUnity%E6%97%A0%E7%BA%BF%E8%BF%9C%E7%A8%8B%E9%83%A8%E7%BD%B2/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>C#学习</title>
      <link>http://hhc99.github.io/CSharp/</link>
      <guid>http://hhc99.github.io/CSharp/</guid>
      <pubDate>Tue, 29 Nov 2022 13:51:46 GMT</pubDate>
      
      <description>&lt;h1 id=&quot;C-简介&quot;&gt;&lt;a href=&quot;#C-简介&quot; class=&quot;headerlink&quot; title=&quot;C#简介&quot;&gt;&lt;/a&gt;C#简介&lt;/h1&gt;&lt;p&gt;C#是一门接近于传统高级语言C和C++的现代的、通用的、面向对象的编程语言，其与Java非常相似，有许多强大的编程功能。但我是C++选手，所以下文的很多内容都将以C++语言作为对比来进行学习。&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<h1 id="C-简介"><a href="#C-简介" class="headerlink" title="C#简介"></a>C#简介</h1><p>C#是一门接近于传统高级语言C和C++的现代的、通用的、面向对象的编程语言，其与Java非常相似，有许多强大的编程功能。但我是C++选手，所以下文的很多内容都将以C++语言作为对比来进行学习。</p> <span id="more"></span><p>其主要的优势为：</p><ul><li>现代的、通用的编程语言</li><li>面向对象、面向组件、容易学习的结构化语言</li><li>可以在多种计算机平台上编译，产生高效率的程序，是.Net框架的一部分</li></ul><p>C#的一些重要的功能：</p><ul><li>布尔条件（Boolean Conditions）</li><li>自动垃圾回收（Automatic Garbage Collection)</li><li>标准库 （Standard Library）</li><li>组件版本（Assembly Versioning）</li><li>属性（Properties）和事件（Events）</li><li>委托（Delegates）和事件管理（Events Management）</li><li>易于使用的泛型（Generics）</li><li>索引器（Indexers）</li><li>条件编译（Conditional Compilation）</li><li>简单的多线程（Multithreading）</li><li>LINQ 和 Lambda 表达式</li><li>集成 Windows</li></ul><h1 id="C-环境"><a href="#C-环境" class="headerlink" title="C#环境"></a>C#环境</h1><h2 id="Net-框架（-Net-Framework）"><a href="#Net-框架（-Net-Framework）" class="headerlink" title=".Net 框架（.Net Framework）"></a>.Net 框架（.Net Framework）</h2><p>.Net 框架是一个创新的平台，能帮您编写出下面类型的应用程序：</p><ul><li>Windows 应用程序</li><li>Web 应用程序</li><li>Web 服务</li></ul><p>.Net 框架应用程序是多平台的应用程序。框架的设计方式使它适用于下列各种语言：C#、C++、Visual Basic、Jscript、COBOL 等等。所有这些语言可以访问框架，彼此之间也可以互相交互。</p><p>.Net 框架由一个巨大的代码库组成，用于 C# 等客户端语言。下面列出一些 .Net 框架的组件：</p><ul><li>公共语言运行库（Common Language Runtime CLR）</li><li>.Net 框架类库（.Net Framework Class Library）</li><li>公共语言规范（Common Language Specification）</li><li>通用类型系统（Common Type System）</li><li>元数据（Metadata）和组件（Assemblies）</li><li>Windows 窗体（Windows Forms）</li><li>ASP.Net 和 ASP.Net AJAX</li><li>ADO.Net</li><li>Windows 工作流基础（Windows Workflow Foundation WF）</li><li>Windows 显示基础（Windows Presentation Foundation）</li><li>Windows 通信基础（Windows Communication Foundation WCF）</li><li>LINQ</li></ul><h2 id="C-基础"><a href="#C-基础" class="headerlink" title="C#基础"></a>C#基础</h2><h3 id="C-程序结构"><a href="#C-程序结构" class="headerlink" title="C#程序结构"></a>C#程序结构</h3><p>所有的编程语言都逃不过”hello,world”, c#语言也是，这里，我们直接上代码，编写一个最简单的程序：</p><pre><code>using System;namespace HelloWorldApplication&#123;    class HelloWorld    &#123;      static void Main(string[] args)      &#123;         /* 我的第一个 C# 程序*/         Console.WriteLine(&quot;Hello World&quot;);         Console.ReadKey();      &#125;    &#125;&#125;</code></pre><p>这里，只需要注意一下，这里的程序结构是通过在命名空间来具体实现的。</p><p>基本语法中与C++的一些相同点：</p><ul><li>using、class关键字，using用于声明包含的命名空间，class用于声明一个类。</li><li>单行注释用&#x2F;&#x2F;，多行注释用&#x2F;* *&#x2F;，不同软件中也可以快速注释和取消注释，例如在Visual studio中Ctrl+K+C是快速注释，而Ctrl+K+U是取消注释。</li><li>成员函数和成员变量。</li><li>一些关键字和标识符的使用和作用。标识符是用来识别类、变量、函数或者任何其他用户定义的项目。</li></ul><h3 id="C-数据类型"><a href="#C-数据类型" class="headerlink" title="C#数据类型"></a>C#数据类型</h3><p>在C#中，变量主要分为以下几种类型：</p><ul><li>值类型（Value types)</li><li>引用类型（Reference types)</li><li>指针类型（Pointer types)</li></ul><h4 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h4><p>值类型直接包含数据。比如 int、char、float，它们分别存储数字、字符、浮点数。当您声明一个 int 类型时，系统分配内存来存储值。  </p><h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><p>引用类型不包含存储在变量中的实际数据，但它们包含对变量的引用。</p><p>换句话说，它们指的是一个内存位置。使用多个变量时，引用类型可以指向一个内存位置。如果内存位置的数据是由一个变量改变的，其他变量会自动反映这种值的变化。内置的 引用类型有：object、dynamic 和 string。</p><h5 id="对象（Object）类型"><a href="#对象（Object）类型" class="headerlink" title="对象（Object）类型"></a>对象（Object）类型</h5><p>对象（Object）类型 是 C# 通用类型系统（Common Type System - CTS）中所有数据类型的终极基类。Object 是 System.Object 类的别名。所以对象（Object）类型可以被分配任何其他类型（值类型、引用类型、预定义类型或用户自定义类型）的值。但是，在分配值之前，需要先进行类型转换。</p><p>当一个值类型转换为对象类型时，则被称为 装箱；另一方面，当一个对象类型转换为值类型时，则被称为 拆箱。</p><pre><code>object obj;obj = 100; // 这是装箱</code></pre><h5 id="动态（Dynamic）类型"><a href="#动态（Dynamic）类型" class="headerlink" title="动态（Dynamic）类型"></a>动态（Dynamic）类型</h5><p>您可以存储任何类型的值在动态数据类型变量中。这些变量的类型检查是在运行时发生的。</p><p>声明动态类型的语法：</p><pre><code>dynamic &lt;variable_name&gt; = value;</code></pre><p>例如：</p><pre><code>dynamic d = 20;</code></pre><p>动态类型与对象类型相似，但是对象类型变量的类型检查是在<strong>编译</strong>时发生的，而动态类型变量的类型检查是在<strong>运行</strong>时发生的。（相当于静态多态和动态多态，静态多态是在编译期间完成的多态，编译器根据函数实参的类型（可能会进行隐式类型转换），可以推断出要调用那个函数，如果有对应的函数就调用该函数，否则出现编译错误，静态多态的实现方式主要有函数重载，包括普通函数的重载和成员函数的重载以及函数模板的使用；动态多态即动态绑定是运行时的多态，在程序执行期间（非编译期）判断所引用对象的实际类型，根据其实际类型调用相应的方法）——顺便复习一下C++。</p><h4 id="字符串（String）类型"><a href="#字符串（String）类型" class="headerlink" title="字符串（String）类型"></a>字符串（String）类型</h4><p>字符串（String）类型 允许您给变量分配任何字符串值。字符串（String）类型是 System.String 类的别名。它是从对象（Object）类型派生的。字符串（String）类型的值可以通过两种形式进行分配：引号和 @引号。</p><p>例如：<br>    String str &#x3D; “runoob.com”;<br>一个 @引号字符串：</p><pre><code>@&quot;runoob.com&quot;;</code></pre><p>C#string 字符串的前面可以加 @（称作”逐字字符串”）将转义字符（\）当作普通字符对待，比如：</p><pre><code>string str = @&quot;C:\Windows&quot;;</code></pre><p>等价于：</p><pre><code>string str = &quot;C:\\Windows&quot;;</code></pre><p>@ 字符串中可以任意换行，换行符及缩进空格都计算在字符串长度之内。</p><pre><code>string str = @&quot;&lt;script type=&quot;&quot;text/javascript&quot;&quot;&gt;    &lt;!--    --&gt;&lt;/script&gt;&quot;;</code></pre><p>用户自定义引用类型有：class、interface 或 delegate。</p><h4 id="指针类型（Pointer-types）"><a href="#指针类型（Pointer-types）" class="headerlink" title="指针类型（Pointer types）"></a>指针类型（Pointer types）</h4><p>指针类型变量存储另一种类型的内存地址。C# 中的指针与 C 或 C++ 中的指针有相同的功能。</p><p>声明指针类型的语法：</p><pre><code>type* identifier;</code></pre><p>例如：</p><pre><code>char* cptr;int* iptr;</code></pre><h3 id="C-类型转换"><a href="#C-类型转换" class="headerlink" title="C#类型转换"></a>C#类型转换</h3><p>类型转换从根本上说是类型铸造，或者说是把数据从一种类型转换为另一种类型。在 C# 中，类型铸造有两种形式：</p><ul><li>隐式类型转换——这些转换是 C# 默认的以安全方式进行的转换, 不会导致数据丢失。例如，从小的整数类型转换为大的整数类型，从派生类转换为基类。</li><li>显式类型转换——显式类型转换，即强制类型转换。显式转换需要强制转换运算符，而且强制转换会造成数据丢失。</li></ul><p>下面的实例显示了一个显式的类型转换：</p><pre><code>namespace TypeConversionApplication&#123;    class ExplicitConversion    &#123;        static void Main(string[] args)        &#123;            double d = 5673.74;            int i;            // 强制转换 double 为 int            i = (int)d;            Console.WriteLine(i);            Console.ReadKey();                   &#125;    &#125;&#125;</code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre><code>5673</code></pre><h3 id="C-变量"><a href="#C-变量" class="headerlink" title="C#变量"></a>C#变量</h3><p>一个变量只不过是一个供程序操作的存储区的名字。在 C# 中，每个变量都有一个特定的类型，类型决定了变量的内存大小和布局。范围内的值可以存储在内存中，可以对变量进行一系列操作。</p><p>我们已经讨论了各种数据类型。C# 中提供的基本的值类型大致可以分为以下几类：</p><p>|  类型  |举例 |<br>|———  | ——-|<br>| 整数类型     |   sbyte、byte、short、ushort、int、uint、long、ulong 和 char    |<br>|   浮点型     |        float 和 double                                     |<br>|  十进制类型    |  decimal                                     |<br>| 布尔类型    |true 或 false 值，指定的值                                       |<br>|空类型            | 可为空值的数据类型 |</p><h4 id="C-中的变量定义"><a href="#C-中的变量定义" class="headerlink" title="C#中的变量定义"></a>C#中的变量定义</h4><p>C# 中变量定义的语法：</p><pre><code>&lt;data_type&gt; &lt;variable_list&gt;;</code></pre><p>在这里，data_type 必须是一个有效的 C# 数据类型，可以是 char、int、float、double 或其他用户自定义的数据类型。variable_list 可以由一个或多个用逗号分隔的标识符名称组成。</p><p>一些有效的变量定义如下所示：</p><pre><code>int i, j, k;char c, ch;float f, salary;double d;</code></pre><p>您可以在变量定义时进行初始化：</p><pre><code>int i = 100;</code></pre><h4 id="C-中的变量初始化"><a href="#C-中的变量初始化" class="headerlink" title="C#中的变量初始化"></a>C#中的变量初始化</h4><p>变量通过在等号后跟一个常量表达式进行初始化（赋值）。初始化的一般形式为：</p><pre><code>variable_name = value;</code></pre><p>变量可以在声明时被初始化（指定一个初始值）。初始化由一个等号后跟一个常量表达式组成，如下所示：</p><pre><code>&lt;data_type&gt; &lt;variable_name&gt; = value;</code></pre><p>一些实例：</p><pre><code>int d = 3, f = 5;/* 初始化 d 和 f. */byte z = 22; /* 初始化 z. */double pi = 3.14159; /* 声明 pi 的近似值 */char x = &#39;x&#39;;/* 变量 x 的值为 &#39;x&#39; */</code></pre><p>正确地初始化变量是一个良好的编程习惯，否则有时程序会产生意想不到的结果。</p><p>请看下面的实例，使用了各种类型的变量：</p><pre><code>namespace VariableDefinition&#123;    class Program    &#123;        static void Main(string[] args)        &#123;            short a;            int b ;            double c;            /* 实际初始化 */            a = 10;            b = 20;            c = a + b;            //C#中的输出，Console.WriteLine相当于C++中的cout,C中的printf            Console.WriteLine(&quot;a = &#123;0&#125;, b = &#123;1&#125;, c = &#123;2&#125;&quot;, a, b, c);            //C#中的输入，Console.ReadLine相当于C++中的cin,C中的scanf            Console.ReadLine();        &#125;    &#125;&#125;</code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre><code>a = 10, b = 20, c = 30</code></pre><h4 id="接受来自用户的值"><a href="#接受来自用户的值" class="headerlink" title="接受来自用户的值"></a>接受来自用户的值</h4><p>System 命名空间中的 Console 类提供了一个函数 ReadLine()，用于接收来自用户的输入，并把它存储到一个变量中。<br>例如：</p><pre><code>int num;num = Convert.ToInt32(Console.ReadLine());</code></pre><p>函数 Convert.ToInt32() 把用户输入的数据转换为 int 数据类型，因为 Console.ReadLine() 只接受字符串格式的数据。</p><h4 id="C-中的-Lvalues-和-Rvalues"><a href="#C-中的-Lvalues-和-Rvalues" class="headerlink" title="C#中的 Lvalues 和 Rvalues"></a>C#中的 Lvalues 和 Rvalues</h4><p>C# 中的两种表达式：</p><ol><li><p>lvalue：lvalue 表达式可以出现在赋值语句的左边或右边。</p></li><li><p>rvalue：rvalue 表达式可以出现在赋值语句的右边，不能出现在赋值语句的左边。</p></li></ol><p>变量是 lvalue 的，所以可以出现在赋值语句的左边。数值是 rvalue 的，因此不能被赋值，不能出现在赋值语句的左边。下面是一个有效的语句：</p><pre><code>int g = 20;</code></pre><p>下面是一个无效的语句，会产生编译时错误：</p><pre><code>10 = 20;</code></pre><h4 id="C-常量"><a href="#C-常量" class="headerlink" title="C#常量"></a>C#常量</h4><p>常量是固定值，程序执行期间不会改变。常量可以是任何基本数据类型，比如整数常量、浮点常量、字符常量或者字符串常量，还有枚举常量。</p><p>常量可以被当作常规的变量，只是它们的值在定义后不能被修改。</p><h4 id="C-运算符"><a href="#C-运算符" class="headerlink" title="C#运算符"></a>C#运算符</h4><p>运算符是一种告诉编译器执行特定的数学或逻辑操作的符号。C# 有丰富的内置运算符，分类如下：</p><ul><li>算术运算符：同C++的+、—、*、&#x2F;、%、++、–</li><li>关系运算符：同C++的&#x3D;&#x3D;、!&#x3D;、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;</li><li>逻辑运算符：同C++的&amp;&amp;、||、|</li><li>位运算符：同C++的&amp;、|、^、~、&lt;&lt;、&gt;&gt;</li><li>赋值运算符：同C++的&#x3D;、+&#x3D;、-&#x3D;、*&#x3D;、&#x2F;&#x3D;、%&#x3D;、&lt;&lt;&#x3D;、&gt;&gt;&#x3D;、&amp;&#x3D;、^&#x3D;、|&#x3D;</li><li>其他运算符：sizeof()、typeof()、&amp;、*、？、is、as</li></ul><p>|运算符|描述|实例|<br>|—|—       |<br>|sizeof()|返回数据类型的大小|sizeof(int)，将返回 4.|<br>|typeof()|返回 class 的类型|typeof(StreamReader);|<br>|&amp;|返回变量的地址。|&amp;a; 将得到变量的实际地址。|<br>|*|变量的指针。|*a; 将指向一个变量。|<br>|? :|条件表达式|如果条件为真 ? 则为 X : 否则为 Y|<br>|is|判断对象是否为某一类型 |If( Ford is Car) &#x2F;&#x2F; 检查 Ford 是否是 Car 类的一个对象。|<br>|as|强制转换，即使转换失败也不会抛出异常。|Object obj &#x3D; new StringReader(“Hello”); StringReader r &#x3D; obj as StringReader;|</p><h4 id="C-中的运算符优先级"><a href="#C-中的运算符优先级" class="headerlink" title="C#中的运算符优先级"></a>C#中的运算符优先级</h4><p>|类别 |运算符 |结合性 |<br>|—|—|<br>|后缀 |() [] -&gt; . ++ - -  |从左到右 |<br>|一元 |+ - ! ~ ++ - - (type)* &amp; sizeof |从右到左|<br>|乘除 |* &#x2F; % |从左到右|<br>|加减 |+ - |从左到右|<br>|移位 |&lt;&lt; &gt;&gt; |从左到右|<br>|关系 |&lt; &lt;&#x3D; &gt; &gt;&#x3D; 从左到右 |<br>|相等 |&#x3D;&#x3D; !&#x3D; |从左到右 |<br>|位与AND |&amp;|从左到右 |<br>|位异或XOR |^ |从左到右 |<br>|位或OR | 一竖 |从左到右 |<br>|逻辑与AND |&amp;&amp; |从左到右 |<br>|逻辑或OR | 两竖 |从左到右 |<br>|条件 |?: |从右到左 |<br>|赋值 |&#x3D; +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; %&#x3D;&gt;&gt;&#x3D; &lt;&lt;&#x3D; &amp;&#x3D; ^&#x3D; 不等于|从右到左|<br>|逗号 |, |从左到右 |</p><h4 id="C-判断"><a href="#C-判断" class="headerlink" title="C#判断"></a>C#判断</h4><table><thead><tr><th>语句</th><th>描述</th></tr></thead><tbody><tr><td>if 语句</td><td>一个 if 语句 由一个布尔表达式后跟一个或多个语句组成。</td></tr><tr><td>if…else 语句</td><td>一个 if 语句 后可跟一个可选的 else 语句，else 语句在布尔表达式为假时执行。</td></tr><tr><td>嵌套 if 语句</td><td>您可以在一个 if 或 else if 语句内使用另一个 if 或 else if 语句。</td></tr><tr><td>switch 语句</td><td>一个 switch 语句允许测试一个变量等于多个值时的情况。</td></tr><tr><td>嵌套 switch 语句</td><td>您可以在一个 switch 语句内使用另一个 switch 语句。</td></tr><tr><td>? : 运算符</td><td>Exp1 ? Exp2 : Exp3;     <br>   其中，Exp1、Exp2 和 Exp3 是表达式。请注意，冒号的使用和位置。? 表达式的值是由 Exp1 决定的。如果 Exp1 为真，则计算 Exp2 的值，结果即为整个 ? 表达式的值。如果 Exp1 为假，则计算 Exp3 的值，结果即为整个 ? 表达式的值。</td></tr></tbody></table><h4 id="C-循环"><a href="#C-循环" class="headerlink" title="C#循环"></a>C#循环</h4><table><thead><tr><th>循环类型</th><th>描述</th></tr></thead><tbody><tr><td>while 循环</td><td>当给定条件为真时，重复语句或语句组。它会在执行循环主体之前测试条件。</td></tr><tr><td>for&#x2F;foreach 循环</td><td>多次执行一个语句序列，简化管理循环变量的代码。</td></tr><tr><td>do…while 循环</td><td>除了它是在循环主体结尾测试条件外，其他与 while 语句类似。</td></tr><tr><td>嵌套循环</td><td>您可以在 while、for 或 do..while 循环内使用一个或多个循环。</td></tr><tr><td>break 语句</td><td>终止 loop 或 switch 语句，程序流将继续执行紧接着 loop 或 switch 的下一条语句。</td></tr><tr><td>continue 语句</td><td>引起循环跳过主体的剩余部分，立即重新开始测试条件。</td></tr><tr><td>如果条件永远不为假，则循环将变成无限循环。for 循环在传统意义上可用于实现无限循环。由于构成循环的三个表达式中任何一个都不是必需的，您可以将某些条件表达式留空来构成一个无限循环。</td><td></td></tr></tbody></table><h4 id="C-封装"><a href="#C-封装" class="headerlink" title="C#封装"></a>C#封装</h4><p>封装被定义为“把一个或多个项目封装在一个物理的或者逻辑的包中”，在面对对象程序设计方法论中，封装是为了防止对实现细节的访问，抽象和封装是面向对象程序设计的相关特性。抽象允许相关信息可视化，封装则使得开发者实现所需级别的抽象。</p><p>C#封装根据具体的需要，设置使用者的访问权限，并通过访问修饰符来实现。</p><p>一个访问修饰符定义了一个类成员的范围和可见性。C# 支持的访问修饰符如下所示：</p><ul><li>public：所有对象都可以访问；</li><li>private：对象本身在对象内部可以访问；</li><li>protected：只有该类对象及其子类对象可以访问</li><li>internal：同一个程序集的对象可以访问；（介于protected和public之间）</li><li>protected internal：访问限于当前程序集或派生自包含类的类型。</li></ul><h4 id="C-方法"><a href="#C-方法" class="headerlink" title="C#方法"></a>C#方法</h4><p>一个方法是把一些相关的语句组织在一起，用来执行一个任务的语句块。每一个C#程序至少有一个带有Main方法的类。<br>要使用有个方法，您需要：</p><ul><li>定义方法</li><li>调用方法</li></ul><h5 id="C-中定义方法"><a href="#C-中定义方法" class="headerlink" title="C#中定义方法"></a>C#中定义方法</h5><p>当定义一个方法时，从根本上说是在声明它的结构的元素。在 C# 中，定义方法的语法如下：</p><pre><code>&lt;Access Specifier&gt; &lt;Return Type&gt; &lt;Method Name&gt;(Parameter List)&#123;   Method Body&#125;</code></pre><p>下面是方法的各个元素：</p><ul><li>Access Specifier：访问修饰符，这个决定了变量或方法对于另一个类的可见性。</li><li>Return type：返回类型，一个方法可以返回一个值。返回类型是方法返回的值的数据类型。如果方法不返回任何值，则返回类型为 void。</li><li>Method name：方法名称，是一个唯一的标识符，且是大小写敏感的。它不能与类中声明的其他标识符相同。</li><li>Parameter list：参数列表，使用圆括号括起来，该参数是用来传递和接收方法的数据。参数列表是指方法的参数类型、顺序和数量。参数是可选的，也就是说，一个方法可能不包含参数。</li><li>Method body：方法主体，包含了完成任务所需的指令集。</li></ul><p>实例：<br>    class NumberManipulator<br>    {<br>       public int FindMax(int num1, int num2)<br>       {<br>          &#x2F;* 局部变量声明 *&#x2F;<br>          int result;</p><pre><code>      if (num1 &gt; num2)         result = num1;      else         result = num2;      return result;   &#125;   ...&#125;</code></pre><h5 id="C-中调用方法"><a href="#C-中调用方法" class="headerlink" title="C#中调用方法"></a>C#中调用方法</h5><pre><code>using System;namespace CalculatorApplication&#123;   class NumberManipulator   &#123;      public int FindMax(int num1, int num2)      &#123;         /* 局部变量声明 */         int result;         if (num1 &gt; num2)            result = num1;         else            result = num2;          return result;      &#125;      static void Main(string[] args)      &#123;         /* 局部变量定义 */         int a = 100;         int b = 200;         int ret;         NumberManipulator n = new NumberManipulator();         //调用 FindMax 方法         ret = n.FindMax(a, b);         Console.WriteLine(&quot;最大值是： &#123;0&#125;&quot;, ret );         Console.ReadLine();      &#125;   &#125;&#125;</code></pre><h5 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h5><table><thead><tr><th>方式</th><th>描述</th></tr></thead><tbody><tr><td>值参数</td><td>这种方式复制参数的实际值给函数的形式参数，实参和形参使用的是两个不同内存中的值。在这种情况下，当形参的值发生改变时，不会影响实参的值，从而保证了实参数据的安全。</td></tr><tr><td>引用参数</td><td>这种方式复制参数的内存位置的引用给形式参数。这意味着，当形参的值发生改变时，同时也改变实参的值。</td></tr><tr><td>输出参数</td><td>这种方式可以返回多个值。</td></tr></tbody></table><h4 id="C-数组"><a href="#C-数组" class="headerlink" title="C#数组"></a>C#数组</h4><p>数组是一个存储相同类型元素的固定大小的顺序集合。数组是用来存储数据的集合，通常认为数组是一个同一类型变量的集合。</p><p>声明数组变量并不是声明 number0、number1、…、number99 一个个单独的变量，而是声明一个就像 numbers 这样的变量，然后使用 numbers[0]、numbers[1]、…、numbers[99] 来表示一个个单独的变量。数组中某个指定的元素是通过索引来访问的。</p><p>所有的数组都是由连续的内存位置组成的。最低的地址对应第一个元素，最高的地址对应最后一个元素。<br>实例</p><pre><code>using System;namespace ArrayApplication&#123;   class MyArray   &#123;      static void Main(string[] args)      &#123;         int []  n = new int[10]; /* n 是一个带有 10 个整数的数组 */初始化数组         int i,j;         /* 赋值给数组 n 中的元素 */                 for ( i = 0; i &lt; 10; i++ )         &#123;            n[i] = i + 100;         &#125;         /* 输出每个数组元素的值 */         for (j = 0; j &lt; 10; j++ )         &#123;            Console.WriteLine(&quot;Element[&#123;0&#125;] = &#123;1&#125;&quot;, j, n[j]);         &#125;         Console.ReadKey();      &#125;   &#125;&#125;</code></pre><h4 id="C-字符串（String）"><a href="#C-字符串（String）" class="headerlink" title="C# 字符串（String）"></a>C# 字符串（String）</h4><p>创建 String 对象<br>您可以使用以下方法之一来创建 string 对象：</p><ul><li>通过给 String 变量指定一个字符串</li><li>通过使用 String 类构造函数</li><li>通过使用字符串串联运算符（ + ）</li><li>通过检索属性或调用一个返回字符串的方法</li><li>通过格式化方法来转换一个值或对象为它的字符串表示形式</li></ul><p>实例：</p><pre><code>using System;namespace StringApplication&#123;    class Program    &#123;        static void Main(string[] args)        &#123;           //字符串，字符串连接            string fname, lname;            fname = &quot;Rowan&quot;;            lname = &quot;Atkinson&quot;;            string fullname = fname + lname;            Console.WriteLine(&quot;Full Name: &#123;0&#125;&quot;, fullname);            //通过使用 string 构造函数            char[] letters = &#123; &#39;H&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;,&#39;o&#39; &#125;;            string greetings = new string(letters);            Console.WriteLine(&quot;Greetings: &#123;0&#125;&quot;, greetings);            //方法返回字符串            string[] sarray = &#123; &quot;Hello&quot;, &quot;From&quot;, &quot;Tutorials&quot;, &quot;Point&quot; &#125;;            string message = String.Join(&quot; &quot;, sarray);            Console.WriteLine(&quot;Message: &#123;0&#125;&quot;, message);            //用于转化值的格式化方法            DateTime waiting = new DateTime(2012, 10, 10, 17, 58, 1);            string chat = String.Format(&quot;Message sent at &#123;0:t&#125; on &#123;0:D&#125;&quot;, waiting);            Console.WriteLine(&quot;Message: &#123;0&#125;&quot;, chat);            Console.ReadKey() ;        &#125;    &#125;&#125;</code></pre><h4 id="C-结构体"><a href="#C-结构体" class="headerlink" title="C#结构体"></a>C#结构体</h4><h5 id="类VS结构"><a href="#类VS结构" class="headerlink" title="类VS结构"></a>类VS结构</h5><p>类和结构体有以下几个基本的不同点：</p><ul><li>类是引用类型，结构体是值类型</li><li>结构体不支持继承</li><li>结构体不能声明默认的构造函数</li></ul><h4 id="C-枚举（Enum）"><a href="#C-枚举（Enum）" class="headerlink" title="C# 枚举（Enum）"></a>C# 枚举（Enum）</h4><p>枚举是一组命名整型常量。枚举类型是使用 enum 关键字声明的。C#枚举是值类型。换句话说，枚举包含自己的值，且不能继承或传递继承。</p><h4 id="C-类"><a href="#C-类" class="headerlink" title="C#类"></a>C#类</h4><p>C#类和C++类的特征很相似，有类的定义，成员函数和封装，类的继承（但是C#不支持多重继承），构造函数，析构函数，静态成员，虚函数来实现多态性，运算符重载，</p><h5 id="可重载和不可重载运算符"><a href="#可重载和不可重载运算符" class="headerlink" title="可重载和不可重载运算符"></a>可重载和不可重载运算符</h5><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>+, -, !, ~, ++, –</td><td>这些一元运算符只有一个操作数，且可以被重载。</td></tr><tr><td>+, -, *, &#x2F;, %</td><td>这些二元运算符带有两个操作数，且可以被重载。</td></tr><tr><td>&#x3D;&#x3D;, !&#x3D;, &lt;, &gt;, &lt;&#x3D;, &gt;&#x3D;</td><td>这些比较运算符可以被重载。</td></tr><tr><td>&amp;&amp;, 或运算（两竖）</td><td>这些条件逻辑运算符不能被直接重载。</td></tr><tr><td>+&#x3D;, -&#x3D;, *&#x3D;, &#x2F;&#x3D;, %&#x3D;</td><td>这些赋值运算符不能被重载。</td></tr><tr><td>&#x3D;, ., ?:, -&gt;, new, is, sizeof, typeof</td><td>这些运算符不能被重载。</td></tr></tbody></table><h4 id="c-接口"><a href="#c-接口" class="headerlink" title="c#接口"></a>c#接口</h4><p>接口定义了所有类继承接口时应该遵循的语法合同。接口定义了语法合同”是什么”部分，派生类定义了语法合同”怎么做”部分。</p><p>接口定义了属性、方法、事件，这些都是接口的成员。接口只包含了成员的声明。成员的定义是派生类的责任。接口提供了派生类应该遵循的标准结构。</p><p>接口使得实现接口的类或者结构在形式上保持一致。</p><p>抽象类在某种程度上与接口类似，但是，它们大多只是用在当只有少数方法由基类声明由派生类实现时。接口本身并不实现任何功能，它只是和声明实现该接口的对象订立一个必须实现哪些行为的契约。抽象类不能直接实例化，但允许派生出具体的，具有实际功能的类。  </p><p>接口可以继承，如果一个接口继承了其他的接口，那么实现类或者结构就要实现所有接口的成员。</p><h4 id="C-命名空间-Namespace"><a href="#C-命名空间-Namespace" class="headerlink" title="C#命名空间(Namespace)"></a>C#命名空间(Namespace)</h4><p>命名空间的设计目的是提供一种让一组名称与其他名称分割开的形式。在一个命名空间中声明的类的名称与另一个命名空间中声明的相同的类的名称不冲突。<br>实例</p><pre><code>using System;namespace first_space&#123;   class namespace_cl   &#123;  public void func()      &#123;         Console.WriteLine(&quot;Inside first_space&quot;);      &#125;   &#125;&#125;namespace second_space&#123;   class namespace_cl   &#123;      public void func()      &#123;         Console.WriteLine(&quot;Inside second_space&quot;);      &#125;   &#125;&#125;  class TestClass&#123;   static void Main(string[] args)   &#123;      first_space.namespace_cl fc = new first_space.namespace_cl();      second_space.namespace_cl sc = new second_space.namespace_cl();      fc.func();      sc.func();      Console.ReadKey();   &#125;&#125;</code></pre><p>当上面的代码被编译和执行时，它会产生下列结果：</p><pre><code>Inside first_spaceInside second_space</code></pre><h4 id="C-异常处理"><a href="#C-异常处理" class="headerlink" title="C#异常处理"></a>C#异常处理</h4><p>异常是在程序执行期间出现的问题。C# 中的异常是对程序运行时出现的特殊情况的一种响应，比如尝试除以零。</p><p>异常提供了一种把程序控制权从某个部分转移到另一个部分的方式。C# 异常处理时建立在四个关键词之上的：try、catch、finally 和 throw。</p><ul><li>try：一个 try 块标识了一个将被激活的特定的异常的代码块。后跟一个或多个 catch 块。</li><li>catch：程序通过异常处理程序捕获异常。catch 关键字表示异常的捕获。</li><li>finally：finally 块用于执行给定的语句，不管异常是否被抛出都会执行。例如，如果您打开一个文件，不管是否出现异常文件都要被关闭。</li><li>throw：当问题出现时，程序抛出一个异常。使用 throw 关键字来完成。</li></ul><h4 id="C-文件的输入与输出"><a href="#C-文件的输入与输出" class="headerlink" title="C#文件的输入与输出"></a>C#文件的输入与输出</h4><p>一个<strong>文件</strong>是一个存储在磁盘中带有指定名称和目录路径的数据集合。当打开文件进行读写时，它变成一个<strong>流</strong>。</p><p>从根本上说，流是通过通信路径传递的字节序列。有两个主要的流：<strong>输入流</strong> 和 <strong>输出流</strong>。<strong>输入流</strong>用于从文件读取数据（读操作），<strong>输出流</strong>用于向文件写入数据（写操作）。</p><h4 id="C-特性（Attribute）"><a href="#C-特性（Attribute）" class="headerlink" title="C#特性（Attribute）"></a>C#特性（Attribute）</h4><p>特性（Attribute）是用于在运行时传递程序中各种元素（比如类、方法、结构、枚举、组件等）的行为信息的声明性标签。您可以通过使用特性向程序添加声明性信息。一个声明性标签是通过放置在它所应用的元素前面的方括号（[ ]）来描述的。</p><p>特性（Attribute）用于添加元数据，如编译器指令和注释、描述、方法、类等其他信息。.Net 框架提供了两种类型的特性：预定义特性和自定义特性。</p><p>规定特性（Attribute）<br>规定特性（Attribute）的语法如下：</p><pre><code>[attribute(positional_parameters, name_parameter = value, ...)]element</code></pre><p>特性（Attribute）的名称和值是在方括号内规定的，放置在它所应用的元素之前。positional_parameters 规定必需的信息，name_parameter 规定可选的信息。</p><p>预定义特性（Attribute）<br>.Net 框架提供了三种预定义特性：</p><ul><li>AttributeUsage</li><li>Conditional</li><li>Obsolete</li></ul><p>AttributeUsage</p><p>预定义特性 AttributeUsage 描述了如何使用一个自定义特性类。它规定了特性可应用到的项目的类型。</p><p>规定该特性的语法如下：</p><pre><code>[AttributeUsage(   validon,   AllowMultiple=allowmultiple,   Inherited=inherited)]</code></pre><p>其中：</p><ul><li>参数 validon 规定特性可被放置的语言元素。它是枚举器 AttributeTargets 的值的组合。默认值是 AttributeTargets.All。</li><li>参数 allowmultiple（可选的）为该特性的 AllowMultiple 属性（property）提供一个布尔值。如果为 true，则该特性是多用的。默认值是 false（单用的）。</li><li>参数 inherited（可选的）为该特性的 Inherited 属性（property）提供一个布尔值。如果为 true，则该特性可被派生类继承。默认值是 false（不被继承）。</li></ul><h4 id="C-反射（Reflection）"><a href="#C-反射（Reflection）" class="headerlink" title="C#反射（Reflection）"></a>C#反射（Reflection）</h4><p>反射指程序可以访问、检测和修改它本身状态或行为的一种能力。</p><p>程序集包含模块，而模块包含类型，类型又包含成员。反射则提供了封装程序集、模块和类型的对象。</p><p>您可以使用反射动态地创建类型的实例，将类型绑定到现有对象，或从现有对象中获取类型。然后，可以调用类型的方法或访问其字段和属性。</p><p>优缺点<br>优点：<br>1、反射提高了程序的灵活性和扩展性。<br>2、降低耦合性，提高自适应能力。<br>3、它允许程序创建和控制任何类的对象，无需提前硬编码目标类。</p><p>缺点：<br>1、性能问题：使用反射基本上是一种解释操作，用于字段和方法接入时要远慢于直接代码。因此反射机制主要应用在对灵活性和拓展性要求很高的系统框架上，普通程序不建议使用。<br>2、使用反射会模糊程序内部逻辑；程序员希望在源代码中看到程序的逻辑，反射却绕过了源代码的技术，因而会带来维护的问题，反射代码比相应的直接代码更复杂。</p><h5 id="反射（Reflection）的用途"><a href="#反射（Reflection）的用途" class="headerlink" title="反射（Reflection）的用途"></a>反射（Reflection）的用途</h5><p>反射（Reflection）有下列用途：</p><ul><li>它允许在运行时查看特性（attribute）信息。</li><li>它允许审查集合中的各种类型，以及实例化这些类型。</li><li>它允许延迟绑定的方法和属性（property）。</li><li>它允许在运行时创建新类型，然后使用这些类型执行一些任务。</li></ul><h4 id="C-属性（Property）"><a href="#C-属性（Property）" class="headerlink" title="C#属性（Property）"></a>C#属性（Property）</h4><p>属性（Property） 是类（class）、结构（structure）和接口（interface）的命名（named）成员。类或结构中的成员变量或方法称为域（Field）。属性（Property）是域（Field）的扩展，且可使用相同的语法来访问。它们使用访问器（accessors）让私有域的值可被读写或操作。</p><p>属性（Property）不会确定存储位置。相反，它们具有可读写或计算它们值的访问器（accessors）。</p><p>例如，有一个名为Student的类，带有age、name和code的私有域。我们不能在类的范围以外直接访问这些域，但是我们可以拥有访问这些私有域的属性。</p><h4 id="C-索引器（Indexer）"><a href="#C-索引器（Indexer）" class="headerlink" title="C#索引器（Indexer）"></a>C#索引器（Indexer）</h4><p>索引器（Indexer）允许一个对象可以像数组一样使用下标的方式来访问。</p><p>当您为类定义一个索引器时，该类的行为就会像一个虚拟数组（virtual array）一样。您可以使用数组访问运算符 [ ] 来访问该类的的成员。</p><h5 id="索引器（Indexer）的用途"><a href="#索引器（Indexer）的用途" class="headerlink" title="索引器（Indexer）的用途"></a>索引器（Indexer）的用途</h5><p>索引器的行为的声明在某种程度上类似于属性（property）。就像属性（property)，您可使用get和set访问器来定义索引器。但是，属性返回或设置一个特定的数据成员，而索引器返回或设置对象实例的一个特定值。换句话说，它把实例数据分为更小的部分，并索引每个部分，获取或设置每个部分。</p><p>定义一个属性（property）包括提供属性名称。索引器定义的时候不带有名称，但带有 this 关键字，它指向对象实例。</p><h4 id="C-委托（Delegate）"><a href="#C-委托（Delegate）" class="headerlink" title="C#委托（Delegate）"></a>C#委托（Delegate）</h4><p>C#中的委托（Delegate）类似于C或C++中函数的指针。委托（Delegate） 是存有对某个方法的引用的一种引用类型变量。引用可在运行时被改变。</p><p>委托（Delegate）特别用于实现事件和回调方法。所有的委托（Delegate）都派生自 System.Delegate 类。</p><h4 id="C-事件（Event）"><a href="#C-事件（Event）" class="headerlink" title="C#事件（Event）"></a>C#事件（Event）</h4><p>事件（Event） 基本上说是一个用户操作，如按键、点击、鼠标移动等等，或者是一些提示信息，如系统生成的通知。应用程序需要在事件发生时响应事件。例如，中断。C#中使用事件机制实现线程间的通信。</p><h4 id="C-集合（Collection）"><a href="#C-集合（Collection）" class="headerlink" title="C#集合（Collection）"></a>C#集合（Collection）</h4><p>集合（Collection）类是专门用于数据存储和检索的类。这些类提供了对栈（stack）、队列（queue）、列表（list）和哈希表（hash table）的支持。大多数集合类实现了相同的接口。</p><p>集合（Collection）类服务于不同的目的，如为元素动态分配内存，基于索引访问列表项等等。这些类创建Object类的对象的集合。在C#中，Object类是所有数据类型的基类。</p><h4 id="C-泛型（Generic）"><a href="#C-泛型（Generic）" class="headerlink" title="C#泛型（Generic）"></a>C#泛型（Generic）</h4><p>泛型（Generic）允许您延迟编写类或方法中的编程元素的数据类型的规范，直到实际在程序中使用它的时候。换句话说，泛型允许您编写一个可以与任何数据类型一起工作的类或方法。</p><p>您可以通过数据类型的替代参数编写类或方法的规范。当编译器遇到类的构造函数或方法的函数调用时，它会生成代码来处理指定的数据类型。</p><p>泛型（Generic）的特性<br>使用泛型是一种增强程序功能的技术，具体表现在以下几个方面：</p><ul><li>它有助于您最大限度地重用代码、保护类型的安全以及提高性能。</li><li>您可以创建泛型集合类。.NET 框架类库在 System.Collections.Generic 命名空间中包含了一些新的泛型集合类。您可以使用这些泛型集合类来替代 System.Collections 中的集合类。</li><li>您可以创建自己的泛型接口、泛型类、泛型方法、泛型事件和泛型委托。</li><li>您可以对泛型类进行约束以访问特定数据类型的方法。</li><li>关于泛型数据类型中使用的类型的信息可在运行时通过使用反射获取。</li></ul><h4 id="C-匿名方法"><a href="#C-匿名方法" class="headerlink" title="C#匿名方法"></a>C#匿名方法</h4><p>我们已经提到过，委托是用于引用与其具有相同标签的方法。换句话说，您可以使用委托对象调用可由委托引用的方法。</p><p>匿名方法（Anonymous methods） 提供了一种传递代码块作为委托参数的技术。匿名方法是没有名称只有主体的方法。</p><p>在匿名方法中您不需要指定返回类型，它是从方法主体内的 return 语句推断的。</p><h4 id="C-多线程"><a href="#C-多线程" class="headerlink" title="C#多线程"></a>C#多线程</h4><p>线程被定义为程序的执行路径。每个线程都定义了一个独特的控制流。如果您的应用程序涉及到复杂的和耗时的操作，那么设置不同的线程执行路径往往是有益的，每个线程执行特定的工作。</p><p>线程是轻量级进程。一个使用线程的常见实例是现代操作系统中并行编程的实现。使用线程节省了 CPU 周期的浪费，同时提高了应用程序的效率。</p><p>到目前为止我们编写的程序是一个单线程作为应用程序的运行实例的单一的过程运行的。但是，这样子应用程序同时只能执行一个任务。为了同时执行多个任务，它可以被划分为更小的线程。</p><h4 id="C-不安全代码"><a href="#C-不安全代码" class="headerlink" title="C#不安全代码"></a>C#不安全代码</h4><p>当一个代码块使用 unsafe 修饰符标记时，C# 允许在函数中使用指针变量。不安全代码或非托管代码是指使用了指针变量的代码块。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote><ol><li>菜鸟教程-C#教程 <a href="https://www.runoob.com/csharp/csharp-tutorial.html">https://www.runoob.com/csharp/csharp-tutorial.html</a></li></ol></blockquote>]]></content:encoded>
      
      
      
      <category domain="http://hhc99.github.io/tags/%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0/">编程学习</category>
      
      
      <comments>http://hhc99.github.io/CSharp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>王卡不网卡</title>
      <link>http://hhc99.github.io/hello-world/</link>
      <guid>http://hhc99.github.io/hello-world/</guid>
      <pubDate>Sun, 27 Nov 2022 09:51:38 GMT</pubDate>
      
        
        
      <description>&lt;p&gt;欢迎各位访客来到王卡的博客，大家一起学习进步！！&lt;/p&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://github.com/hhc99&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;
</description>
        
      
      
      
      <content:encoded><![CDATA[<p>欢迎各位访客来到王卡的博客，大家一起学习进步！！</p><p>More info: <a href="https://github.com/hhc99">Github</a></p>]]></content:encoded>
      
      
      
      
      <comments>http://hhc99.github.io/hello-world/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
